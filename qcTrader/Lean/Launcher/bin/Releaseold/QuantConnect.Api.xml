<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Api</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Api.Api">
            <summary>
            QuantConnect.com Interaction Via API.
            </summary>
        </member>
        <member name="P:QuantConnect.Api.Api.SerializerSettings">
            <summary>
            Serializer settings to use
            </summary>
        </member>
        <member name="P:QuantConnect.Api.Api.ApiConnection">
            <summary>
            Returns the underlying API connection
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.#ctor">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Api.Api"/>
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.Initialize(System.Int32,System.String,System.String)">
            <summary>
            Initialize the API with the given variables
            </summary>
        </member>
        <member name="P:QuantConnect.Api.Api.Connected">
            <summary>
            Check if Api is successfully connected with correct credentials
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateProject(System.String,QuantConnect.Language,System.String)">
            <summary>
            Create a project with the specified name and language via QuantConnect.com API
            </summary>
            <param name="name">Project name</param>
            <param name="language">Programming language to use</param>
            <param name="organizationId">Optional param for specifying organization to create project under.
            If none provided web defaults to preferred.</param>
            <returns>Project object from the API.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadProject(System.Int32)">
            <summary>
            Get details about a single project
            </summary>
            <param name="projectId">Id of the project</param>
            <returns><see cref="T:QuantConnect.Api.ProjectResponse"/> that contains information regarding the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ListProjects">
            <summary>
            List details of all projects
            </summary>
            <returns><see cref="T:QuantConnect.Api.ProjectResponse"/> that contains information regarding the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.AddProjectFile(System.Int32,System.String,System.String)">
            <summary>
            Add a file to a project
            </summary>
            <param name="projectId">The project to which the file should be added</param>
            <param name="name">The name of the new file</param>
            <param name="content">The content of the new file</param>
            <returns><see cref="T:QuantConnect.Api.ProjectFilesResponse"/> that includes information about the newly created file</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateProjectFileName(System.Int32,System.String,System.String)">
            <summary>
            Update the name of a file
            </summary>
            <param name="projectId">Project id to which the file belongs</param>
            <param name="oldFileName">The current name of the file</param>
            <param name="newFileName">The new name for the file</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/> indicating success</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateProjectFileContent(System.Int32,System.String,System.String)">
            <summary>
            Update the contents of a file
            </summary>
            <param name="projectId">Project id to which the file belongs</param>
            <param name="fileName">The name of the file that should be updated</param>
            <param name="newFileContents">The new contents of the file</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/> indicating success</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadProjectFiles(System.Int32)">
            <summary>
            Read all files in a project
            </summary>
            <param name="projectId">Project id to which the file belongs</param>
            <returns><see cref="T:QuantConnect.Api.ProjectFilesResponse"/> that includes the information about all files in the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadProjectNodes(System.Int32)">
            <summary>
            Read all nodes in a project.
            </summary>
            <param name="projectId">Project id to which the nodes refer</param>
            <returns><see cref="T:QuantConnect.Api.ProjectNodesResponse"/> that includes the information about all nodes in the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateProjectNodes(System.Int32,System.String[])">
            <summary>
            Update the active state of some nodes to true.
            If you don't provide any nodes, all the nodes become inactive and AutoSelectNode is true.
            </summary>
            <param name="projectId">Project id to which the nodes refer</param>
            <param name="nodes">List of node ids to update</param>
            <returns><see cref="T:QuantConnect.Api.ProjectNodesResponse"/> that includes the information about all nodes in the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadProjectFile(System.Int32,System.String)">
            <summary>
            Read a file in a project
            </summary>
            <param name="projectId">Project id to which the file belongs</param>
            <param name="fileName">The name of the file</param>
            <returns><see cref="T:QuantConnect.Api.ProjectFilesResponse"/> that includes the file information</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLeanVersions">
            <summary>
            Gets a list of LEAN versions with their corresponding basic descriptions
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.DeleteProjectFile(System.Int32,System.String)">
            <summary>
            Delete a file in a project
            </summary>
            <param name="projectId">Project id to which the file belongs</param>
            <param name="name">The name of the file that should be deleted</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/> that includes the information about all files in the project</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DeleteProject(System.Int32)">
            <summary>
            Delete a project
            </summary>
            <param name="projectId">Project id we own and wish to delete</param>
            <returns>RestResponse indicating success</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateCompile(System.Int32)">
            <summary>
            Create a new compile job request for this project id.
            </summary>
            <param name="projectId">Project id we wish to compile.</param>
            <returns>Compile object result</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadCompile(System.Int32,System.String)">
            <summary>
            Read a compile packet job result.
            </summary>
            <param name="projectId">Project id we sent for compile</param>
            <param name="compileId">Compile id return from the creation request</param>
            <returns><see cref="T:QuantConnect.Api.Compile"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.SendNotification(QuantConnect.Notifications.Notification,System.Int32)">
            <summary>
            Sends a notification
            </summary>
            <param name="notification">The notification to send</param>
            <param name="projectId">The project id</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/> containing success response and errors</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateBacktest(System.Int32,System.String,System.String)">
            <summary>
            Create a new backtest request and get the id.
            </summary>
            <param name="projectId">Id for the project to backtest</param>
            <param name="compileId">Compile id for the project</param>
            <param name="backtestName">Name for the new backtest</param>
            <returns><see cref="T:QuantConnect.Api.Backtest"/>t</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadBacktest(System.Int32,System.String,System.Boolean)">
            <summary>
            Read out a backtest in the project id specified.
            </summary>
            <param name="projectId">Project id to read</param>
            <param name="backtestId">Specific backtest id to read</param>
            <param name="getCharts">True will return backtest charts</param>
            <returns><see cref="T:QuantConnect.Api.Backtest"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadBacktestOrders(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the orders of the specified backtest and project id.
            </summary>
            <param name="projectId">Id of the project from which to read the orders</param>
            <param name="backtestId">Id of the backtest from which to read the orders</param>
            <param name="start">Starting index of the orders to be fetched. Required if end > 100</param>
            <param name="end">Last index of the orders to be fetched. Note that end - start must be less than 100</param>
            <remarks>Will throw an <see cref="T:System.Net.WebException"/> if there are any API errors</remarks>
            <returns>The list of <see cref="T:QuantConnect.Orders.Order"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadBacktestChart(System.Int32,System.String,System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Returns a requested chart object from a backtest
            </summary>
            <param name="projectId">Project ID of the request</param>
            <param name="name">The requested chart name</param>
            <param name="start">The Utc start seconds timestamp of the request</param>
            <param name="end">The Utc end seconds timestamp of the request</param>
            <param name="count">The number of data points to request</param>
            <param name="backtestId">Associated Backtest ID for this chart request</param>
            <returns>The chart</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateBacktest(System.Int32,System.String,System.String,System.String)">
            <summary>
            Update a backtest name
            </summary>
            <param name="projectId">Project for the backtest we want to update</param>
            <param name="backtestId">Backtest id we want to update</param>
            <param name="name">Name we'd like to assign to the backtest</param>
            <param name="note">Note attached to the backtest</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ListBacktests(System.Int32,System.Boolean)">
            <summary>
            List all the backtest summaries for a project
            </summary>
            <param name="projectId">Project id we'd like to get a list of backtest for</param>
            <param name="includeStatistics">True for include statistics in the response, false otherwise</param>
            <returns><see cref="T:QuantConnect.Api.BacktestList"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DeleteBacktest(System.Int32,System.String)">
            <summary>
            Delete a backtest from the specified project and backtestId.
            </summary>
            <param name="projectId">Project for the backtest we want to delete</param>
            <param name="backtestId">Backtest id we want to delete</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateBacktestTags(System.Int32,System.String,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Updates the tags collection for a backtest
            </summary>
            <param name="projectId">Project for the backtest we want to update</param>
            <param name="backtestId">Backtest id we want to update</param>
            <param name="tags">The new backtest tags</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadBacktestInsights(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Read out the insights of a backtest
            </summary>
            <param name="projectId">Id of the project from which to read the backtest</param>
            <param name="backtestId">Backtest id from which we want to get the insights</param>
            <param name="start">Starting index of the insights to be fetched</param>
            <param name="end">Last index of the insights to be fetched. Note that end - start must be less than 100</param>
            <returns><see cref="T:QuantConnect.Api.InsightResponse"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateLiveAlgorithm(System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a live algorithm.
            </summary>
            <param name="projectId">Id of the project on QuantConnect</param>
            <param name="compileId">Id of the compilation on QuantConnect</param>
            <param name="nodeId">Id of the node that will run the algorithm</param>
            <param name="brokerageSettings">Dictionary with brokerage specific settings. Each brokerage requires certain specific credentials
                                    in order to process the given orders. Each key in this dictionary represents a required field/credential
                                    to provide to the brokerage API and its value represents the value of that field. For example: "brokerageSettings: {
                                    "id": "Binance", "binance-api-secret": "123ABC", "binance-api-key": "ABC123"}. It is worth saying,
                                    that this dictionary must always contain an entry whose key is "id" and its value is the name of the brokerage
                                    (see <see cref="T:QuantConnect.Brokerages.BrokerageName"/>)</param>
            <param name="versionId">The version of the Lean used to run the algorithm.
                                    -1 is master, however, sometimes this can create problems with live deployments.
                                    If you experience problems using, try specifying the version of Lean you would like to use.</param>
            <param name="dataProviders">Dictionary with data providers credentials. Each data provider requires certain credentials
                                    in order to retrieve data from their API. Each key in this dictionary describes a data provider name
                                    and its corresponding value is another dictionary with the required key-value pairs of credential
                                    names and values. For example: "dataProviders: { "InteractiveBrokersBrokerage" : { "id": 12345, "environment" : "paper",
                                    "username": "testUsername", "password": "testPassword"}}"</param>
            <returns>Information regarding the new algorithm <see cref="T:QuantConnect.Api.CreateLiveAlgorithmResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateLiveAlgorithm(System.Int32,System.String,System.String,Python.Runtime.PyObject,System.String,Python.Runtime.PyObject)">
            <summary>
            Create a live algorithm.
            </summary>
            <param name="projectId">Id of the project on QuantConnect</param>
            <param name="compileId">Id of the compilation on QuantConnect</param>
            <param name="nodeId">Id of the node that will run the algorithm</param>
            <param name="brokerageSettings">Python Dictionary with brokerage specific settings. Each brokerage requires certain specific credentials
                                    in order to process the given orders. Each key in this dictionary represents a required field/credential
                                    to provide to the brokerage API and its value represents the value of that field. For example: "brokerageSettings: {
                                    "id": "Binance", "binance-api-secret": "123ABC", "binance-api-key": "ABC123"}. It is worth saying,
                                    that this dictionary must always contain an entry whose key is "id" and its value is the name of the brokerage
                                    (see <see cref="T:QuantConnect.Brokerages.BrokerageName"/>)</param>
            <param name="versionId">The version of the Lean used to run the algorithm.
                                    -1 is master, however, sometimes this can create problems with live deployments.
                                    If you experience problems using, try specifying the version of Lean you would like to use.</param>
            <param name="dataProviders">Python Dictionary with data providers credentials. Each data provider requires certain credentials
                                    in order to retrieve data from their API. Each key in this dictionary describes a data provider name
                                    and its corresponding value is another dictionary with the required key-value pairs of credential
                                    names and values. For example: "dataProviders: { "InteractiveBrokersBrokerage" : { "id": 12345, "environment" : "paper",
                                    "username": "testUsername", "password": "testPassword"}}"</param>
            <returns>Information regarding the new algorithm <see cref="T:QuantConnect.Api.CreateLiveAlgorithmResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ConvertToDictionary(Python.Runtime.PyObject)">
            <summary>
            Converts a given Python dictionary into a C# <see cref="!:Dictionary&lt;string, object&gt;"/>
            </summary>
            <param name="brokerageSettings">Python dictionary to be converted</param>
        </member>
        <member name="M:QuantConnect.Api.Api.ListLiveAlgorithms(System.Nullable{QuantConnect.AlgorithmStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Get a list of live running algorithms for user
            </summary>
            <param name="status">Filter the statuses of the algorithms returned from the api</param>
            <param name="startTime">Earliest launched time of the algorithms returned by the Api</param>
            <param name="endTime">Latest launched time of the algorithms returned by the Api</param>
            <returns><see cref="T:QuantConnect.Api.LiveList"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLiveAlgorithm(System.Int32,System.String)">
            <summary>
            Read out a live algorithm in the project id specified.
            </summary>
            <param name="projectId">Project id to read</param>
            <param name="deployId">Specific instance id to read</param>
            <returns><see cref="T:QuantConnect.Api.LiveAlgorithmResults"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLivePortfolio(System.Int32)">
            <summary>
            Read out the portfolio state of a live algorithm
            </summary>
            <param name="projectId">Id of the project from which to read the live algorithm</param>
            <returns><see cref="T:QuantConnect.Api.PortfolioResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLiveOrders(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the orders of the specified project id live algorithm.
            </summary>
            <param name="projectId">Id of the project from which to read the live orders</param>
            <param name="start">Starting index of the orders to be fetched. Required if end > 100</param>
            <param name="end">Last index of the orders to be fetched. Note that end - start must be less than 100</param>
            <remarks>Will throw an <see cref="T:System.Net.WebException"/> if there are any API errors</remarks>
            <returns>The list of <see cref="T:QuantConnect.Orders.Order"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.LiquidateLiveAlgorithm(System.Int32)">
            <summary>
            Liquidate a live algorithm from the specified project and deployId.
            </summary>
            <param name="projectId">Project for the live instance we want to stop</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.StopLiveAlgorithm(System.Int32)">
            <summary>
            Stop a live algorithm from the specified project and deployId.
            </summary>
            <param name="projectId">Project for the live instance we want to stop</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLiveLogs(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the logs of a specific live algorithm
            </summary>
            <param name="projectId">Project Id of the live running algorithm</param>
            <param name="algorithmId">Algorithm Id of the live running algorithm</param>
            <param name="startLine">Start line of logs to read</param>
            <param name="endLine">End line of logs to read</param>
            <returns><see cref="T:QuantConnect.Api.LiveLog"/> List of strings that represent the logs of the algorithm</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLiveChart(System.Int32,System.String,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Returns a chart object from a live algorithm
            </summary>
            <param name="projectId">Project ID of the request</param>
            <param name="name">The requested chart name</param>
            <param name="start">The Utc start seconds timestamp of the request</param>
            <param name="end">The Utc end seconds timestamp of the request</param>
            <param name="count">The number of data points to request</param>
            <returns>The chart</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadLiveInsights(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read out the insights of a live algorithm
            </summary>
            <param name="projectId">Id of the project from which to read the live algorithm</param>
            <param name="start">Starting index of the insights to be fetched</param>
            <param name="end">Last index of the insights to be fetched. Note that end - start must be less than 100</param>
            <returns><see cref="T:QuantConnect.Api.InsightResponse"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadDataLink(System.String,System.String)">
            <summary>
            Gets the link to the downloadable data.
            </summary>
            <param name="filePath">File path representing the data requested</param>
            <param name="organizationId">Organization to download from</param>
            <returns><see cref="T:QuantConnect.Api.DataLink"/> to the downloadable data.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadDataDirectory(System.String)">
            <summary>
            Get valid data entries for a given filepath from data/list
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadDataPrices(System.String)">
            <summary>
            Gets data prices from data/prices
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadBacktestReport(System.Int32,System.String)">
            <summary>
            Read out the report of a backtest in the project id specified.
            </summary>
            <param name="projectId">Project id to read</param>
            <param name="backtestId">Specific backtest id to read</param>
            <returns><see cref="T:QuantConnect.Api.BacktestReport"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DownloadData(System.String,System.String)">
            <summary>
            Method to purchase and download data from QuantConnect
            </summary>
            <param name="filePath">File path representing the data requested</param>
            <param name="organizationId">Organization to buy the data with</param>
            <returns>A <see cref="T:System.Boolean"/> indicating whether the data was successfully downloaded or not.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.GetAlgorithmStatus(System.String)">
            <summary>
            Get the algorithm status from the user with this algorithm id.
            </summary>
            <param name="algorithmId">String algorithm id we're searching for.</param>
            <returns>Algorithm status enum</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.SetAlgorithmStatus(System.String,QuantConnect.AlgorithmStatus,System.String)">
            <summary>
            Algorithm passes back its current status to the UX.
            </summary>
            <param name="status">Status of the current algorithm</param>
            <param name="algorithmId">String algorithm id we're setting.</param>
            <param name="message">Message for the algorithm status event</param>
            <returns>Algorithm status enum</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.SendStatistics(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Double)">
            <summary>
            Send the statistics to storage for performance tracking.
            </summary>
            <param name="algorithmId">Identifier for algorithm</param>
            <param name="unrealized">Unrealized gainloss</param>
            <param name="fees">Total fees</param>
            <param name="netProfit">Net profi</param>
            <param name="holdings">Algorithm holdings</param>
            <param name="equity">Total equity</param>
            <param name="netReturn">Net return for the deployment</param>
            <param name="volume">Volume traded</param>
            <param name="trades">Total trades since inception</param>
            <param name="sharpe">Sharpe ratio since inception</param>
        </member>
        <member name="M:QuantConnect.Api.Api.SendUserEmail(System.String,System.String,System.String)">
            <summary>
            Send an email to the user associated with the specified algorithm id
            </summary>
            <param name="algorithmId">The algorithm id</param>
            <param name="subject">The email subject</param>
            <param name="body">The email message body</param>
        </member>
        <member name="M:QuantConnect.Api.Api.Download(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)">
            <summary>
            Local implementation for downloading data to algorithms
            </summary>
            <param name="address">URL to download</param>
            <param name="headers">KVP headers</param>
            <param name="userName">Username for basic authentication</param>
            <param name="password">Password for basic authentication</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DownloadBytes(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String)">
            <summary>
            Local implementation for downloading data to algorithms
            </summary>
            <param name="address">URL to download</param>
            <param name="headers">KVP headers</param>
            <param name="userName">Username for basic authentication</param>
            <param name="password">Password for basic authentication</param>
            <returns>A stream from which the data can be read</returns>
            <remarks>Stream.Close() most be called to avoid running out of resources</remarks>
        </member>
        <member name="M:QuantConnect.Api.Api.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateSecureHash(System.Int32,System.String)">
            <summary>
            Generate a secure hash for the authorization headers.
            </summary>
            <returns>Time based hash of user token and timestamp.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadAccount(System.String)">
            <summary>
            Will read the organization account status
            </summary>
            <param name="organizationId">The target organization id, if null will return default organization</param>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadOrganization(System.String)">
            <summary>
            Fetch organization data from web API
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.EstimateOptimization(System.Int32,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Collections.Generic.HashSet{QuantConnect.Optimizer.Parameters.OptimizationParameter},System.Collections.Generic.IReadOnlyList{QuantConnect.Optimizer.Objectives.Constraint})">
            <summary>
            Estimate optimization with the specified parameters via QuantConnect.com API
            </summary>
            <param name="projectId">Project ID of the project the optimization belongs to</param>
            <param name="name">Name of the optimization</param>
            <param name="target">Target of the optimization, see examples in <see cref="T:QuantConnect.Statistics.PortfolioStatistics"/></param>
            <param name="targetTo">Target extremum of the optimization, for example "max" or "min"</param>
            <param name="targetValue">Optimization target value</param>
            <param name="strategy">Optimization strategy, <see cref="!:QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy"/></param>
            <param name="compileId">Optimization compile ID</param>
            <param name="parameters">Optimization parameters</param>
            <param name="constraints">Optimization constraints</param>
            <returns>Estimate object from the API.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.CreateOptimization(System.Int32,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.String,System.Collections.Generic.HashSet{QuantConnect.Optimizer.Parameters.OptimizationParameter},System.Collections.Generic.IReadOnlyList{QuantConnect.Optimizer.Objectives.Constraint},System.Decimal,System.String,System.Int32)">
            <summary>
            Create an optimization with the specified parameters via QuantConnect.com API
            </summary>
            <param name="projectId">Project ID of the project the optimization belongs to</param>
            <param name="name">Name of the optimization</param>
            <param name="target">Target of the optimization, see examples in <see cref="T:QuantConnect.Statistics.PortfolioStatistics"/></param>
            <param name="targetTo">Target extremum of the optimization, for example "max" or "min"</param>
            <param name="targetValue">Optimization target value</param>
            <param name="strategy">Optimization strategy, <see cref="!:QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy"/></param>
            <param name="compileId">Optimization compile ID</param>
            <param name="parameters">Optimization parameters</param>
            <param name="constraints">Optimization constraints</param>
            <param name="estimatedCost">Estimated cost for optimization</param>
            <param name="nodeType">Optimization node type <see cref="T:QuantConnect.Api.OptimizationNodes"/></param>
            <param name="parallelNodes">Number of parallel nodes for optimization</param>
            <returns>BaseOptimization object from the API.</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ListOptimizations(System.Int32)">
            <summary>
            List all the optimizations for a project
            </summary>
            <param name="projectId">Project id we'd like to get a list of optimizations for</param>
            <returns>A list of BaseOptimization objects, <see cref="T:QuantConnect.Api.BaseOptimization"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ReadOptimization(System.String)">
            <summary>
            Read an optimization
            </summary>
            <param name="optimizationId">Optimization id for the optimization we want to read</param>
            <returns><see cref="T:QuantConnect.Api.Optimization"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.AbortOptimization(System.String)">
            <summary>
            Abort an optimization
            </summary>
            <param name="optimizationId">Optimization id for the optimization we want to abort</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.UpdateOptimization(System.String,System.String)">
            <summary>
            Update an optimization
            </summary>
            <param name="optimizationId">Optimization id we want to update</param>
            <param name="name">Name we'd like to assign to the optimization</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DeleteOptimization(System.String)">
            <summary>
            Delete an optimization
            </summary>
            <param name="optimizationId">Optimization id for the optimization we want to delete</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.GetObjectStore(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Download the object store files associated with the given organization ID and key
            </summary>
            <param name="organizationId">Organization ID we would like to get the Object Store files from</param>
            <param name="keys">Keys for the Object Store files</param>
            <param name="destinationFolder">Folder in which the object store files will be stored</param>
            <returns>True if the object store files were retrieved correctly, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.GetObjectStoreProperties(System.String,System.String)">
            <summary>
            Get Object Store properties given the organization ID and the Object Store key
            </summary>
            <param name="organizationId">Organization ID we would like to get the Object Store from</param>
            <param name="key">Key for the Object Store file</param>
            <returns><see cref="T:QuantConnect.Api.PropertiesObjectStoreResponse"/></returns>
            <remarks>It does not work when the object store is a directory</remarks>
        </member>
        <member name="M:QuantConnect.Api.Api.SetObjectStore(System.String,System.String,System.Byte[])">
            <summary>
            Upload files to the Object Store
            </summary>
            <param name="organizationId">Organization ID we would like to upload the file to</param>
            <param name="key">Key to the Object Store file</param>
            <param name="objectData">File (as an array of bytes) to be uploaded</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.DeleteObjectStore(System.String,System.String)">
            <summary>
            Request to delete Object Store metadata of a specific organization and key
            </summary>
            <param name="organizationId">Organization ID we would like to delete the Object Store file from</param>
            <param name="key">Key to the Object Store file</param>
            <returns><see cref="T:QuantConnect.Api.RestResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.ListObjectStore(System.String,System.String)">
            <summary>
            Request to list Object Store files of a specific organization and path
            </summary>
            <param name="organizationId">Organization ID we would like to list the Object Store files from</param>
            <param name="path">Path to the Object Store files</param>
            <returns><see cref="T:QuantConnect.Api.ListObjectStoreResponse"/></returns>
        </member>
        <member name="M:QuantConnect.Api.Api.FormatPathForDataRequest(System.String,System.String)">
            <summary>
            Helper method to normalize path for api data requests
            </summary>
            <param name="filePath">Filepath to format</param>
            <param name="dataFolder">The data folder to use</param>
            <returns>Normalized path</returns>
        </member>
        <member name="M:QuantConnect.Api.Api.MakeRequestOrThrow``1(RestSharp.RestRequest,System.String)">
            <summary>
            Helper method that will execute the given api request and throw an exception if it fails
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.BorrowClient">
            <summary>
            Borrows and HTTP client from the pool
            </summary>
        </member>
        <member name="M:QuantConnect.Api.Api.ReturnClient(System.Lazy{System.Net.Http.HttpClient})">
            <summary>
            Returns the HTTP client to the pool
            </summary>
        </member>
        <member name="T:QuantConnect.Api.ApiConnection">
            <summary>
            API Connection and Hash Manager
            </summary>
        </member>
        <member name="P:QuantConnect.Api.ApiConnection.Client">
            <summary>
            Authorized client to use for requests.
            </summary>
        </member>
        <member name="M:QuantConnect.Api.ApiConnection.#ctor(System.Int32,System.String)">
            <summary>
            Create a new Api Connection Class.
            </summary>
            <param name="userId">User Id number from QuantConnect.com account. Found at www.quantconnect.com/account </param>
            <param name="token">Access token for the QuantConnect account. Found at www.quantconnect.com/account </param>
        </member>
        <member name="P:QuantConnect.Api.ApiConnection.Connected">
            <summary>
            Return true if connected successfully.
            </summary>
        </member>
        <member name="M:QuantConnect.Api.ApiConnection.TryRequest``1(RestSharp.RestRequest,``0@)">
            <summary>
            Place a secure request and get back an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="result">Result object from the </param>
            <returns>T typed object response</returns>
        </member>
        <member name="M:QuantConnect.Api.ApiConnection.TryRequestAsync``1(RestSharp.RestRequest)">
            <summary>
            Place a secure request and get back an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <returns>T typed object response</returns>
        </member>
    </members>
</doc>
