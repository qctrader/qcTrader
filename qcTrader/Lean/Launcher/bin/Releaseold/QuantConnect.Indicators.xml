<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuantConnect.Indicators</name>
    </assembly>
    <members>
        <member name="T:QuantConnect.Indicators.AbsolutePriceOscillator">
            <summary>
            This indicator computes the Absolute Price Oscillator (APO)
            The Absolute Price Oscillator is calculated using the following formula:
            APO[i] = FastMA[i] - SlowMA[i]
            </summary>
            <remarks>
            The Absolute Price Oscillator is the same as a MACD with the signal period equal to the slow period.
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.AbsolutePriceOscillator.#ctor(System.String,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AbsolutePriceOscillator"/> class using the specified name and parameters.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.AbsolutePriceOscillator.#ctor(System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AbsolutePriceOscillator"/> class using the specified parameters.
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="T:QuantConnect.Indicators.AccelerationBands">
            <summary>
            The Acceleration Bands created by Price Headley plots upper and lower envelope bands around a moving average.
            </summary>
            <seealso cref="T:QuantConnect.Indicators.IndicatorBase`1" />
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.MovingAverageType">
            <summary>
            Gets the type of moving average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.MiddleBand">
            <summary>
            Gets the middle acceleration band (moving average)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.UpperBand">
            <summary>
            Gets the upper acceleration band  (High * ( 1 + Width * (High - Low) / (High + Low)))
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.LowerBand">
            <summary>
            Gets the lower acceleration band  (Low * (1 - Width * (High - Low)/ (High + Low)))
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccelerationBands.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccelerationBands" /> class.
            </summary>
            <param name="name">The name of this indicator.</param>
            <param name="period">The period of the three moving average (middle, upper and lower band).</param>
            <param name="width">A coefficient specifying the distance between the middle band and upper or lower bands.</param>
            <param name="movingAverageType">Type of the moving average.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AccelerationBands.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccelerationBands" /> class.
            </summary>
            <param name="period">The period of the three moving average (middle, upper and lower band).</param>
            <param name="width">A coefficient specifying the distance between the middle band and upper or lower bands.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AccelerationBands.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccelerationBands" /> class.
            </summary>
            <param name="period">The period of the three moving average (middle, upper and lower band).</param>
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccelerationBands.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccelerationBands.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccelerationBands.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.AccumulationDistribution">
            <summary>
            This indicator computes the Accumulation/Distribution (AD)
            The Accumulation/Distribution is calculated using the following formula:
            AD = AD + ((Close - Low) - (High - Close)) / (High - Low) * Volume
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistribution"/> class using the specified name.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistribution.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistribution"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistribution.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistribution.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistribution.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.AccumulationDistributionOscillator">
            <summary>
            This indicator computes the Accumulation/Distribution Oscillator (ADOSC)
            The Accumulation/Distribution Oscillator is calculated using the following formula:
            ADOSC = EMA(fast,AD) - EMA(slow,AD)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistributionOscillator"/> class using the specified parameters
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AccumulationDistributionOscillator"/> class using the specified parameters
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistributionOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AccumulationDistributionOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AccumulationDistributionOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AdvanceDeclineDifference">
            <summary>
            The Advance Decline Difference compute the difference between the number of stocks 
            that closed higher and the number of stocks that closed lower than their previous day's closing prices.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineDifference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AdvanceDeclineDifference"/> class
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AdvanceDeclineIndicator">
            <summary>
            The advance-decline indicator compares the number of stocks 
            that closed higher against the number of stocks 
            that closed lower than their previous day's closing prices.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.#ctor(System.String,System.Func{System.Collections.Generic.IEnumerable{QuantConnect.Data.Market.TradeBar},System.Decimal},System.Func{System.Decimal,System.Decimal,System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AdvanceDeclineRatio"/> class
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.Add(QuantConnect.Symbol)">
            <summary>
            Add tracking asset issue
            </summary>
            <param name="asset">tracking asset issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.AddStock(QuantConnect.Symbol)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.Remove(QuantConnect.Symbol)">
            <summary>
            Remove tracking asset issue
            </summary>
            <param name="asset">tracking asset issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.RemoveStock(QuantConnect.Symbol)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AdvanceDeclineIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AdvanceDeclineIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.ValidateAndComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AdvanceDeclineRatio">
            <summary>
            The advance-decline ratio (ADR) compares the number of stocks 
            that closed higher against the number of stocks 
            that closed lower than their previous day's closing prices.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineRatio.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AdvanceDeclineRatio"/> class
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AdvanceDeclineVolumeRatio">
            <summary>
            The Advance Decline Volume Ratio is a Breadth indicator calculated as ratio of 
            summary volume of advancing stocks to summary volume of declining stocks. 
            AD Volume Ratio is used in technical analysis to see where the main trading activity is focused.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AdvanceDeclineVolumeRatio.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AdvanceDeclineVolumeRatio"/> class
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Alpha">
            <summary>
            In financial analysis, the Alpha indicator is used to measure the performance of an investment (such as a stock or ETF) 
            relative to a benchmark index, often representing the broader market. Alpha indicates the excess return of the investment 
            compared to the return of the benchmark index. 
            
            The S P 500 index is frequently used as a benchmark in Alpha calculations to represent the overall market performance. 
            Alpha is an essential tool for investors to understand the idiosyncratic returns of their investment that aren't caused
            by movement in the underlying benchmark.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._referenceSymbol">
            <summary>
            Symbol of the reference used
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._targetSymbol">
            <summary>
            Symbol of the target used
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._alphaPeriod">
            <summary>
            Period of the indicator - alpha
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._targetROC">
            <summary>
            Rate of change of the target symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._referenceROC">
            <summary>
            Rate of change of the reference symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._alpha">
            <summary>
            Alpha of the target used in relation with the reference
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._beta">
            <summary>
            Beta of the target used in relation with the reference
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Alpha._riskFreeInterestRateModel">
            <summary>
            Interest rate model used to compute the risk free rate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Alpha.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Alpha.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRate">The risk free rate of this indicator for given period</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period values
            </summary>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRate">The risk free rate of this indicator for given period</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period value
            </summary>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRate">The risk free rate of this indicator for given period</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Nullable{System.Decimal})">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period value
            </summary>
            <param name="name"></param>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRate">The risk free rate of this indicator for given period</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period values
            </summary>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period value
            </summary>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period value
            </summary>
            <param name="name"></param>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period values
            </summary>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="alphaPeriod">Period of the indicator - alpha</param>
            <param name="betaPeriod">Period of the indicator - beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Alpha indicator with the specified target, reference, and period value
            </summary>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Alpha indicator with the specified name, target, reference, and period value
            </summary>
            <param name="name"></param>
            <param name="targetSymbol"></param>
            <param name="referenceSymbol"></param>
            <param name="period">Period of the indicator - alpha and beta</param>
            <param name="riskFreeRateModel">The risk free rate model of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.ComputeAlpha">
            <summary>
            Computes the alpha of the target used in relation with the reference and stores it in the _alpha field
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Alpha.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ArmsIndex">
            <summary>
            The Arms Index, also called the Short-Term Trading Index (TRIN) 
            is a technical analysis indicator that compares the number of advancing 
            and declining stocks (AD Ratio) to advancing and declining volume (AD volume).
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ArmsIndex.ADRatio">
            <summary>
            Gets the Advance/Decline Ratio (ADR) indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ArmsIndex.ADVRatio">
            <summary>
            Gets the Advance/Decline Volume Ratio (ADVR) indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ArmsIndex"/> class
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ArmsIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ArmsIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.Add(QuantConnect.Symbol)">
            <summary>
            Add Tracking stock issue
            </summary>
            <param name="asset">the tracking stock issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.AddStock(QuantConnect.Symbol)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.Remove(QuantConnect.Symbol)">
            <summary>
            Remove Tracking stock issue
            </summary>
            <param name="asset">the tracking stock issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.ArmsIndex.RemoveStock(QuantConnect.Symbol)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ArnaudLegouxMovingAverage">
            <summary>
            Smooth and high sensitive moving Average. This moving average reduce lag of the information
            but still being smooth to reduce noises.
            Is a weighted moving average, which weights have a Normal shape;
            the parameters Sigma and Offset affect the kurtosis and skewness of the weights respectively.
            Source: https://www.cjournal.cz/files/308.pdf
            </summary>
            <seealso cref="T:QuantConnect.Indicators.IndicatorDataPoint" />
        </member>
        <member name="P:QuantConnect.Indicators.ArnaudLegouxMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ArnaudLegouxMovingAverage.#ctor(System.String,System.Int32,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ArnaudLegouxMovingAverage" /> class.
            </summary>
            <param name="name">string - a name for the indicator</param>
            <param name="period">int - the number of periods to calculate the ALMA</param>
            <param name="sigma">
            int - this parameter is responsible for the shape of the curve coefficients. It affects the weight vector kurtosis.
            </param>
            <param name="offset">
            decimal - This parameter allows regulating the smoothness and high sensitivity of the
            Moving Average. The range for this parameter is [0, 1]. It affects the weight vector skewness.
            </param>
        </member>
        <member name="M:QuantConnect.Indicators.ArnaudLegouxMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ArnaudLegouxMovingAverage" /> class.
            </summary>
            <param name="name">string - a name for the indicator</param>
            <param name="period">int - the number of periods to calculate the ALMA.</param>
        </member>
        <member name="M:QuantConnect.Indicators.ArnaudLegouxMovingAverage.#ctor(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ArnaudLegouxMovingAverage" /> class.
            </summary>
            <param name="period">int - the number of periods to calculate the ALMA</param>
            <param name="sigma">
            int - this parameter is responsible for the shape of the curve coefficients. It affects the weight
            vector kurtosis.
            </param>
            <param name="offset">
            decimal -  This parameter allows regulating the smoothness and high sensitivity of the Moving
            Average. The range for this parameter is [0, 1]. It affects the weight vector skewness.
            </param>
        </member>
        <member name="M:QuantConnect.Indicators.ArnaudLegouxMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ArnaudLegouxMovingAverage" /> class.
            </summary>
            <param name="period">int - the number of periods to calculate the ALMA.</param>
        </member>
        <member name="M:QuantConnect.Indicators.ArnaudLegouxMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>
            A new value for this indicator
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:QuantConnect.Indicators.AroonOscillator">
            <summary>
            The Aroon Oscillator is the difference between AroonUp and AroonDown. The value of this
            indicator fluctuates between -100 and +100. An upward trend bias is present when the oscillator
            is positive, and a negative trend bias is present when the oscillator is negative. AroonUp/Down
            values over 75 identify strong trends in their respective direction.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.AroonUp">
            <summary>
            Gets the AroonUp indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.AroonDown">
            <summary>
            Gets the AroonDown indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AroonOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new AroonOscillator from the specified up/down periods.
            </summary>
            <param name="upPeriod">The lookback period to determine the highest high for the AroonDown</param>
            <param name="downPeriod">The lookback period to determine the lowest low for the AroonUp</param>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new AroonOscillator from the specified up/down periods.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="upPeriod">The lookback period to determine the highest high for the AroonDown</param>
            <param name="downPeriod">The lookback period to determine the lowest low for the AroonUp</param>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeAroonUp(System.Int32,QuantConnect.Indicators.Maximum,QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            AroonUp = 100 * (period - {periods since max})/period
            </summary>
            <param name="upPeriod">The AroonUp period</param>
            <param name="max">A Maximum indicator used to compute periods since max</param>
            <param name="input">The next input data</param>
            <returns>The AroonUp value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.ComputeAroonDown(System.Int32,QuantConnect.Indicators.Minimum,QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            AroonDown = 100 * (period - {periods since min})/period
            </summary>
            <param name="downPeriod">The AroonDown period</param>
            <param name="min">A Minimum indicator used to compute periods since min</param>
            <param name="input">The next input data</param>
            <returns>The AroonDown value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AroonOscillator.Reset">
            <summary>
            Resets this indicator and both sub-indicators (AroonUp and AroonDown)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AugenPriceSpike">
            <summary>
            The Augen Price Spike indicator is an indicator that measures price 
            changes in terms of standard deviations. In the book, The
            Volatility Edge in Options Trading, Jeff Augen describes a
            method for tracking absolute price changes in terms of recent
            volatility, using the standard deviation.
            
            length = x
            closes = closeArray
            closes1 = closeArray shifted right by 1
            closes2 = closeArray shifted right by 2
            closeLog = np.log(np.divide(closes1, closes2))
            SDev = np.std(closeLog)
            m = SDev * closes1[-1]
            spike = (closes[-1]-closes1[-1])/m
            return spike
            
            Augen Price Spike from TradingView
            https://www.tradingview.com/script/fC7Pn2X2-Price-Spike-Jeff-Augen/  
            
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AugenPriceSpike.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AugenPriceSpike class using the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.AugenPriceSpike.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new AugenPriceSpike indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.AugenPriceSpike.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AugenPriceSpike.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AugenPriceSpike.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A a value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AugenPriceSpike.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage">
            <summary>
            An Autoregressive Intergrated Moving Average (ARIMA) is a time series model which can be used to describe a set of data.
            In particular,with Xₜ representing the series, the model assumes the data are of form
            (after differencing <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder" /> times):
            <para>
                Xₜ = c + εₜ + ΣᵢφᵢXₜ₋ᵢ +  Σᵢθᵢεₜ₋ᵢ
            </para>
            where the first sum has an upper limit of <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._arOrder" /> and the second <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._maOrder" />.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder">
            <summary>
            Differencing coefficient (d). Determines how many times the series should be differenced before fitting the
            model.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._arOrder">
            <summary>
            AR coefficient -- p
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._maOrder">
            <summary>
            MA Coefficient -- q
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.HandleExceptions">
            <summary>
            Whether or not to handle potential exceptions, returning a zero value. I.e, the values
            provided as input are not valid by the Normal Equations direct regression method
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.ArParameters">
            <summary>
            Fitted AR parameters (φ terms).
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.MaParameters">
            <summary>
            Fitted MA parameters (θ terms).
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.Intercept">
            <summary>
            Fitted intercept (c term).
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.ArResidualError">
            <summary>
            The variance of the residuals (Var(ε)) from the first step of <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])" />.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.MaResidualError">
            <summary>
            The variance of the residuals (Var(ε)) from the second step of <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])" />.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fits an ARIMA(arOrder,diffOrder,maOrder) model of form (after differencing it <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder" /> times):
            <para>
                Xₜ = c + εₜ + ΣᵢφᵢXₜ₋ᵢ +  Σᵢθᵢεₜ₋ᵢ
            </para>
            where the first sum has an upper limit of <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._arOrder" /> and the second <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._maOrder" />.
            This particular constructor fits the model by means of <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])" /> for a specified name.
            </summary>
            <param name="name">The name of the indicator</param>
            <param name="arOrder">AR order (p) -- defines the number of past values to consider in the AR component of the model.</param>
            <param name="diffOrder">Difference order (d) -- defines how many times to difference the model before fitting parameters.</param>
            <param name="maOrder">MA order -- defines the number of past values to consider in the MA component of the model.</param>
            <param name="period">Size of the rolling series to fit onto</param>
            <param name="intercept">Whether or not to include the intercept term</param>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fits an ARIMA(arOrder,diffOrder,maOrder) model of form (after differencing it <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder" /> times):
            <para>
                Xₜ = c + εₜ + ΣᵢφᵢXₜ₋ᵢ +  Σᵢθᵢεₜ₋ᵢ
            </para>
            where the first sum has an upper limit of <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._arOrder" /> and the second <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._maOrder" />.
            This particular constructor fits the model by means of <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])" /> using ordinary least squares.
            </summary>
            <param name="arOrder">AR order (p) -- defines the number of past values to consider in the AR component of the model.</param>
            <param name="diffOrder">Difference order (d) -- defines how many times to difference the model before fitting parameters.</param>
            <param name="maOrder">MA order (q) -- defines the number of past values to consider in the MA component of the model.</param>
            <param name="period">Size of the rolling series to fit onto</param>
            <param name="intercept">Whether to include an intercept term (c)</param>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Forecasts the series of the fitted model one point ahead.
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])">
            <summary>
            Fits the model by means of implementing the following pseudo-code algorithm (in the form of "if{then}"):
            <code>
            if diffOrder > 0 {Difference data diffOrder times}
            if arOrder > 0 {Fit the AR model Xₜ = ΣᵢφᵢXₜ; ε's are set to residuals from fitting this.}
            if maOrder > 0 {Fit the MA parameters left over  Xₜ = c + εₜ + ΣᵢφᵢXₜ₋ᵢ +  Σᵢθᵢεₜ₋ᵢ}
            Return: φ and θ estimates.
            </code>
            http://mbhauser.com/informal-notes/two-step-arma-estimation.pdf
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.MovingAverageStep(System.Double[][],System.Double[],System.Double)">
            <summary>
            Fits the moving average component in the <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])"/> method.
            </summary>
            <param name="lags">An array of lagged data (<see cref="M:QuantConnect.Indicators.TimeSeriesIndicator.LaggedSeries(System.Int32,System.Double[],System.Boolean)"/>).</param>
            <param name="data">The input series, differenced <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder"/> times.</param>
            <param name="errorMa">The summed residuals (by default 0) associated with the MA component.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.AutoRegressiveStep(System.Double[][],System.Double[],System.Double)">
            <summary>
            Fits the autoregressive component in the <see cref="M:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage.TwoStepFit(System.Double[])"/> method.
            </summary>
            <param name="lags">An array of lagged data (<see cref="M:QuantConnect.Indicators.TimeSeriesIndicator.LaggedSeries(System.Int32,System.Double[],System.Boolean)"/>).</param>
            <param name="data">The input series, differenced <see cref="F:QuantConnect.Indicators.AutoRegressiveIntegratedMovingAverage._diffOrder"/> times.</param>
            <param name="errorAr">The summed residuals (by default 0) associated with the AR component.</param>
        </member>
        <member name="T:QuantConnect.Indicators.AverageDirectionalIndex">
            <summary>
            This indicator computes Average Directional Index which measures trend strength without regard to trend direction.
            Firstly, it calculates the Directional Movement and the True Range value, and then the values are accumulated and smoothed
            using a custom smoothing method proposed by Wilder. For an n period smoothing, 1/n of each period's value is added to the total period.
            From these accumulated values we are therefore able to derived the 'Positive Directional Index' (+DI) and 'Negative Directional Index' (-DI)
            which is used to calculate the Average Directional Index.
            Computation source:
            https://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:average_directional_index_adx
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.PositiveDirectionalIndex">
            <summary>
            Gets the index of the Plus Directional Indicator
            </summary>
            <value>
            The index of the Plus Directional Indicator.
            </value>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.NegativeDirectionalIndex">
            <summary>
            Gets the index of the Minus Directional Indicator
            </summary>
            <value>
            The index of the Minus Directional Indicator.
            </value>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalIndex"/> class.
            </summary>
            <param name="period">The period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalIndex"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="period">The period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeTrueRange(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the True Range value.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputePositiveDirectionalMovement(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the positive directional movement.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeNegativeDirectionalMovement(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the negative directional movement.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating">
            <summary>
            This indicator computes the Average Directional Movement Index Rating (ADXR). 
            The Average Directional Movement Index Rating is calculated with the following formula:
            ADXR[i] = (ADX[i] + ADX[i - period + 1]) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the ADXR</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.AverageDirectionalMovementIndexRating"/> class using the specified period.
            </summary> 
            <param name="period">The period of the ADXR</param>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.ADX">
            <summary>
            The Average Directional Index indicator instance being used
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageDirectionalMovementIndexRating.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AverageTrueRange">
             <summary>
             The AverageTrueRange indicator is a measure of volatility introduced by Welles Wilder in his
             book: New Concepts in Technical Trading Systems. This indicator computes the TrueRange and then
             smoothes the TrueRange over a given period.
            
             TrueRange is defined as the maximum of the following:
               High - Low
               ABS(High - PreviousClose)
               ABS(Low - PreviousClose)
             </summary>
        </member>
        <member name="F:QuantConnect.Indicators.AverageTrueRange._smoother">
            <summary>This indicator is used to smooth the TrueRange computation</summary>
            <remarks>This is not exposed publicly since it is the same value as this indicator, meaning
            that this '_smoother' computers the ATR directly, so exposing it publicly would be duplication</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.AverageTrueRange.TrueRange">
            <summary>
            Gets the true range which is the more volatile calculation to be smoothed by this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageTrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AverageTrueRange.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new AverageTrueRange indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The smoothing period used to smooth the true range values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new AverageTrueRange indicator using the specified period and moving average type
            </summary>
            <param name="period">The smoothing period used to smooth the true range values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.ComputeTrueRange(QuantConnect.Data.Market.IBaseDataBar,QuantConnect.Data.Market.IBaseDataBar)">
             <summary>
             Computes the TrueRange from the current and previous trade bars
            
             TrueRange is defined as the maximum of the following:
               High - Low
               ABS(High - PreviousClose)
               ABS(Low - PreviousClose)
             </summary>
             <param name="previous">The previous trade bar</param>
             <param name="current">The current trade bar</param>
             <returns>The true range</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AverageTrueRange.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.AwesomeOscillator">
            <summary>
            The Awesome Oscillator Indicator tracks the price midpoint-movement of a security. Specifically,
            <para>
            AO = MAfast[(H+L)/2] - MAslow[(H+L)/2] 
            </para>
            where MAfast and MAslow denote simple moving averages wherein fast has a shorter period.
            https://www.barchart.com/education/technical-indicators/awesome_oscillator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AwesomeOscillator.SlowAo">
            <summary>
            Gets the indicators slow period moving average.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AwesomeOscillator.FastAo">
            <summary>
            Gets the indicators fast period moving average.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AwesomeOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.AwesomeOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.AwesomeOscillator.#ctor(System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new Awesome Oscillator from the specified periods.
            </summary>
            <param name="fastPeriod">The period of the fast moving average associated with the AO</param>
            <param name="slowPeriod">The period of the slow moving average associated with the AO</param>
            <param name="type">The type of moving average used when computing the fast and slow term. Defaults to simple moving average.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AwesomeOscillator.#ctor(System.String,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new Awesome Oscillator from the specified periods.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The period of the fast moving average associated with the AO</param>
            <param name="slowPeriod">The period of the slow moving average associated with the AO</param>
            <param name="type">The type of moving average used when computing the fast and slow term. Defaults to simple moving average.</param>
        </member>
        <member name="M:QuantConnect.Indicators.AwesomeOscillator.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state.
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.AwesomeOscillator.Reset">
            <summary>
            Resets this indicator 
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.BalanceOfPower">
            <summary>
            This indicator computes the Balance Of Power (BOP).
            The Balance Of Power is calculated with the following formula:
            BOP = (Close - Open) / (High - Low)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BalanceOfPower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.BalanceOfPower"/> class using the specified name.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BalanceOfPower.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.BalanceOfPower"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.BalanceOfPower.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BalanceOfPower.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BalanceOfPower.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.BarIndicator">
            <summary>
            The BarIndicator is an indicator that accepts IBaseDataBar data as its input.
            
            This type is more of a shim/typedef to reduce the need to refer to things as IndicatorBase&lt;IBaseDataBar&gt;
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BarIndicator.#ctor(System.String)">
            <summary>
            Creates a new TradeBarIndicator with the specified name
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="T:QuantConnect.Indicators.Beta">
            <summary>
            In technical analysis Beta indicator is used to measure volatility or risk of a target (ETF) relative to the overall 
            risk (volatility) of the reference (market indexes). The Beta indicators compares target's price movement to the 
            movements of the indexes over the same period of time.
            
            It is common practice to use the SPX index as a benchmark of the overall reference market when it comes to Beta 
            calculations.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._targetDataPoints">
            <summary>
            RollingWindow to store the data points of the target symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._referenceDataPoints">
            <summary>
            RollingWindow to store the data points of the reference symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._referenceSymbol">
            <summary>
            Symbol of the reference used
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._targetSymbol">
            <summary>
            Symbol of the target used
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._targetReturns">
            <summary>
            RollingWindow of returns of the target symbol in the given period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._referenceReturns">
            <summary>
            RollingWindow of returns of the reference symbol in the given period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Beta._beta">
            <summary>
            Beta of the target used in relation with the reference
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Beta.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Beta.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32)">
            <summary>
            Creates a new Beta indicator with the specified name, target, reference,  
            and period values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32)">
            <summary>
            Creates a new Beta indicator with the specified target, reference,  
            and period values
            </summary>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.#ctor(System.String,System.Int32,QuantConnect.Symbol,QuantConnect.Symbol)">
            <summary>
            Creates a new Beta indicator with the specified name, period, target and 
            reference values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <remarks>Constructor overload for backward compatibility.</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            
            As this indicator is receiving data points from two different symbols,
            it's going to compute the next value when the amount of data points
            of each of them is the same. Otherwise, it will return the last beta
            value computed
            </summary>
            <param name="input">The input value of this indicator on this time step.
            It can be either from the target or the reference symbol</param>
            <returns>The beta value of the target used in relation with the reference</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.GetNewReturn(QuantConnect.Indicators.RollingWindow{System.Decimal})">
            <summary>
            Computes the returns with the new given data point and the last given data point
            </summary>
            <param name="rollingWindow">The collection of data points from which we want
            to compute the return</param>
            <returns>The returns with the new given data point</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.ComputeBeta">
            <summary>
            Computes the beta value of the target in relation with the reference
            using the target and reference returns
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Beta.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.BollingerBands">
            <summary>
            This indicator creates a moving average (middle band) with an upper band and lower band
            fixed at k standard deviations above and below the moving average.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.MovingAverageType">
            <summary>
            Gets the type of moving average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.StandardDeviation">
            <summary>
            Gets the standard deviation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.MiddleBand">
            <summary>
            Gets the middle Bollinger band (moving average)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.UpperBand">
            <summary>
            Gets the upper Bollinger band (middleBand + k * stdDev)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.LowerBand">
            <summary>
            Gets the lower Bollinger band (middleBand - k * stdDev)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.BandWidth">
            <summary>
            Gets the Bollinger BandWidth indicator
            BandWidth = ((Upper Band - Lower Band) / Middle Band) * 100
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.PercentB">
            <summary>
            Gets the Bollinger %B
            %B = (Price - Lower Band)/(Upper Band - Lower Band)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.Price">
            <summary>
            Gets the Price level
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.#ctor(System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the BollingerBands class
            </summary>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the BollingerBands class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="k">The number of standard deviations specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.BollingerBands.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of the following sub-indicators from the given state:
            StandardDeviation, MiddleBand, UpperBand, LowerBand, BandWidth, %B
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.ValidateAndComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Validate and Compute the next value for this indicator
            </summary>
            <param name="input">Input for this indicator</param>
            <returns><see cref="T:QuantConnect.Indicators.IndicatorResult"/> of this update</returns>
            <remarks>Override implemented to handle GH issue #4927</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.BollingerBands.Reset">
            <summary>
            Resets this indicator and all sub-indicators (StandardDeviation, LowerBand, MiddleBand, UpperBand, BandWidth, %B)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby">
            <summary>
            Abandoned Baby candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: doji
            - third candle: black(white) real body that moves well within the first candle's real body
            - upside(downside) gap between the first candle and the doji(the shadows of the two candles don't touch)
            - downside (upside) gap between the doji and the third candle(the shadows of the two candles don't touch)
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive (+1) when it's an abandoned baby bottom or negative (-1) when it's
            an abandoned baby top; the user should consider that an abandoned baby is significant when it appears in 
            an uptrend or downtrend, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AbandonedBaby.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock">
            <summary>
            Advance Block candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - each candle opens within or near the previous white real body
            - first candle: long white with no or very short upper shadow(a short shadow is accepted too for more flexibility)
            - second and third candles, or only third candle, show signs of weakening: progressively smaller white real bodies
            and/or relatively long upper shadows; see below for specific conditions
            The meanings of "long body", "short shadow", "far" and "near" are specified with SetCandleSettings;
            The returned value is negative(-1): advance block is always bearish;
            The user should consider that advance block is significant when it appears in uptrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.AdvanceBlock.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold">
            <summary>
            Belt-hold candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long white(black) real body
            - no or very short lower(upper) shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.BeltHold"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.BeltHold.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.BeltHold.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway">
            <summary>
            Breakaway candlestick pattern indicator
            </summary>
            <remarks>
             Must have:
            - first candle: long black(white)
            - second candle: black(white) day whose body gaps down(up)
            - third candle: black or white day with lower(higher) high and lower(higher) low than prior candle's
            - fourth candle: black(white) day with lower(higher) high and lower(higher) low than prior candle's
            - fifth candle: white(black) day that closes inside the gap, erasing the prior 3 days
            The meaning of "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that breakaway is significant in a trend opposite to the last candle, while this
            function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Breakaway"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Breakaway.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Breakaway.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType">
            <summary>
            Types of candlestick settings
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyLong">
            <summary>
            Real body is long when it's longer than the average of the 10 previous candles' real body (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyVeryLong">
            <summary>
            Real body is very long when it's longer than 3 times the average of the 10 previous candles' real body (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyShort">
            <summary>
            Real body is short when it's shorter than the average of the 10 previous candles' real bodies (2)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.BodyDoji">
            <summary>
            Real body is like doji's body when it's shorter than 10% the average of the 10 previous candles' high-low range (3)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowLong">
            <summary>
            Shadow is long when it's longer than the real body (4)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowVeryLong">
            <summary>
            Shadow is very long when it's longer than 2 times the real body (5)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowShort">
            <summary>
            Shadow is short when it's shorter than half the average of the 10 previous candles' sum of shadows (6)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.ShadowVeryShort">
            <summary>
            Shadow is very short when it's shorter than 10% the average of the 10 previous candles' high-low range (7)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Near">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "near" means "&lt;= 20% of the average of the 5 previous candles' high-low range" (8)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Far">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "far" means "&gt;= 60% of the average of the 5 previous candles' high-low range" (9)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettingType.Equal">
            <summary>
            When measuring distance between parts of candles or width of gaps
            "equal" means "&lt;= 5% of the average of the 5 previous candles' high-low range" (10)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType">
            <summary>
            Types of candlestick ranges
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.RealBody">
            <summary>
            The part of the candle between open and close (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.HighLow">
            <summary>
            The complete range of the candle (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleRangeType.Shadows">
            <summary>
            The shadows (or tails) of the candle (2)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleColor">
            <summary>
            Colors of a candle
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleColor.White">
            <summary>
            White is an up candle (close higher or equal than open) (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleColor.Black">
            <summary>
            Black is a down candle (close lower than open) (-1)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSettings">
            <summary>
            Candle settings for all candlestick patterns
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.DefaultSettings">
            <summary>
            Default settings for all candle setting types
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.Get(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType)">
            <summary>
            Returns the candle setting for the requested type
            </summary>
            <param name="type">The candle setting type</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSettings.Set(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,QuantConnect.Indicators.CandlestickPatterns.CandleSetting)">
            <summary>
            Changes the default candle setting for the requested type
            </summary>
            <param name="type">The candle setting type</param>
            <param name="setting">The candle setting</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandleSetting">
            <summary>
            Represents a candle setting
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.RangeType">
            <summary>
            The candle range type
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.AveragePeriod">
            <summary>
            The number of previous candles to average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.Factor">
            <summary>
            A multiplier to calculate candle ranges
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandleSetting.#ctor(QuantConnect.Indicators.CandlestickPatterns.CandleRangeType,System.Int32,System.Decimal)">
            <summary>
            Creates an instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.CandleSetting"/> class
            </summary>
            <param name="rangeType">The range type</param>
            <param name="averagePeriod">The average period</param>
            <param name="factor">The factor</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern">
            <summary>
            Abstract base class for a candlestick pattern indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern"/> with the specified name
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleColor(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the candle color of a candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBody(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the distance between the close and the open of a candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetHighLowRange(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the full range of the candle
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleRange(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the range of a candle
            </summary>
            <param name="type">The type of setting to use</param>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleGapUp(QuantConnect.Data.Market.IBaseDataBar,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns true if the candle is higher than the previous one
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleGapDown(QuantConnect.Data.Market.IBaseDataBar,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns true if the candle is lower than the previous one
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBodyGapUp(QuantConnect.Data.Market.IBaseDataBar,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns true if the candle is higher than the previous one (with no body overlap)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetRealBodyGapDown(QuantConnect.Data.Market.IBaseDataBar,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns true if the candle is lower than the previous one (with no body overlap)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetLowerShadow(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the range of the candle's lower shadow
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetUpperShadow(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the range of the candle's upper shadow
            </summary>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.CandlestickPattern.GetCandleAverage(QuantConnect.Indicators.CandlestickPatterns.CandleSettingType,System.Decimal,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Returns the average range of the previous candles
            </summary>
            <param name="type">The type of setting to use</param>
            <param name="sum">The sum of the previous candles ranges</param>
            <param name="tradeBar">The input candle</param>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu">
            <summary>
            Closing Marubozu candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long white(black) real body
            - no or very short upper(lower) shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ClosingMarubozu.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow">
            <summary>
            Concealed Baby Swallow candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: black marubozu (very short shadows)
            - second candle: black marubozu(very short shadows)
            - third candle: black candle that opens gapping down but has an upper shadow that extends into the prior body
            - fourth candle: black candle that completely engulfs the third candle, including the shadows
            The meanings of "very short shadow" are specified with SetCandleSettings;
            The returned value is positive(+1): concealing baby swallow is always bullish;
            The user should consider that concealing baby swallow is significant when it appears in downtrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ConcealedBabySwallow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack">
            <summary>
            Counterattack candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black (white)
            - second candle: long white(black) with close equal to the prior close
            The meaning of "equal" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that counterattack is significant in a trend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Counterattack"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Counterattack.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Counterattack.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover">
            <summary>
            Dark Cloud Cover candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - second candle: black candle that opens above previous day high and closes within previous day real body; 
            Greg Morris wants the close to be below the midpoint of the previous real body
            The meaning of "long" is specified with SetCandleSettings, the penetration of the first real body is specified
            with optInPenetration
            The returned value is negative(-1): dark cloud cover is always bearish
            The user should consider that a dark cloud cover is significant when it appears in an uptrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DarkCloudCover.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Doji">
            <summary>
            Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - open quite equal to close
            How much can be the maximum distance between open and close is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: doji shows uncertainty and it is
            neither bullish nor bearish when considered alone
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Doji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Doji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Doji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar">
            <summary>
            Doji Star candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long real body
            - second candle: star(open gapping up in an uptrend or down in a downtrend) with a doji
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            it's defined bullish when the long candle is white and the star gaps up, bearish when the long candle 
            is black and the star gaps down; the user should consider that a doji star is bullish when it appears
            in an uptrend and it's bearish when it appears in a downtrend, so to determine the bullishness or 
            bearishness of the pattern the trend must be analyzed
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DojiStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji">
            <summary>
            Dragonfly Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the high of the day = no or very short upper shadow
            - lower shadow(to distinguish from other dojis, here lower shadow should not be very short)
            The meaning of "doji" and "very short" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: dragonfly doji must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.DragonflyDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing">
            <summary>
            Engulfing candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first: black (white) real body
            - second: white(black) real body that engulfs the prior real body
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that an engulfing must appear in a downtrend if bullish or in an uptrend if bearish,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Engulfing"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Engulfing.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Engulfing.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar">
            <summary>
            Evening Doji Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white real body
            - second candle: doji gapping up
            - third candle: black real body that moves well within the first candle's real body
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is negative(-1): evening star is always bearish;
            The user should consider that an evening star is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningDojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar">
            <summary>
            Evening Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white real body
            - second candle: star(short real body gapping up)
            - third candle: black real body that moves well within the first candle's real body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is negative(-1): evening star is always bearish;
            The user should consider that an evening star is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.EveningStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.EveningStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.EveningStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite">
            <summary>
            Up/Down-gap side-by-side white lines candlestick pattern
            </summary>
            <remarks>
            Must have:
            - upside or downside gap (between the bodies)
            - first candle after the window: white candlestick
            - second candle after the window: white candlestick with similar size(near the same) and about the same
            open(equal) of the previous candle
            - the second candle does not close the window
            The meaning of "near" and "equal" is specified with SetCandleSettings
            The returned value is positive(+1) or negative(-1): the user should consider that upside
            or downside gap side-by-side white lines is significant when it appears in a trend, while this function
            does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GapSideBySideWhite.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji">
            <summary>
            Gravestone Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the low of the day = no or very short lower shadow
            - upper shadow(to distinguish from other dojis, here upper shadow should not be very short)
            The meaning of "doji" and "very short" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: gravestone doji must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.GravestoneDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Hammer">
            <summary>
            Hammer candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long lower shadow
            - no, or very short, upper shadow
            - body below or near the lows of the previous candle
            The meaning of "short", "long" and "near the lows" is specified with SetCandleSettings;
            The returned value is positive(+1): hammer is always bullish;
            The user should consider that a hammer must appear in a downtrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hammer"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Hammer.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hammer.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan">
            <summary>
            Hanging Man candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long lower shadow
            - no, or very short, upper shadow
            - body above or near the highs of the previous candle
            The meaning of "short", "long" and "near the highs" is specified with SetCandleSettings;
            The returned value is negative (-1): hanging man is always bearish;
            The user should consider that a hanging man must appear in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HangingMan"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HangingMan.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HangingMan.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Harami">
            <summary>
            Harami candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: short real body totally engulfed by the first
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that a harami is significant when it appears in a downtrend if bullish or
            in an uptrend when bearish, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Harami"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Harami.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Harami.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross">
            <summary>
            Harami Cross candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) real body
            - second candle: doji totally engulfed by the first
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that a harami cross is significant when it appears in a downtrend if bullish or
            in an uptrend when bearish, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HaramiCross"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HaramiCross.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle">
            <summary>
            High-Wave Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - short real body
            - very long upper and lower shadow
            The meaning of "short" and "very long" is specified with SetCandleSettings
            The returned value is positive(+1) when white or negative(-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HighWaveCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake">
            <summary>
            Hikkake candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first and second candle: inside bar (2nd has lower high and higher low than 1st)
            - third candle: lower high and lower low than 2nd(higher high and higher low than 2nd)
            The returned value for the hikkake bar is positive(+1) or negative(-1) meaning bullish or bearish hikkake
            Confirmation could come in the next 3 days with:
            - a day that closes higher than the high(lower than the low) of the 2nd candle
            The returned value for the confirmation bar is equal to 1 + the bullish hikkake result or -1 - the bearish hikkake result
            Note: if confirmation and a new hikkake come at the same bar, only the new hikkake is reported(the new hikkake
            overwrites the confirmation of the old hikkake)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Hikkake"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Hikkake.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Hikkake.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified">
            <summary>
            Hikkake Modified candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle
            - second candle: candle with range less than first candle and close near the bottom(near the top)
            - third candle: lower high and higher low than 2nd
            - fourth candle: lower high and lower low(higher high and higher low) than 3rd
            The returned value for the hikkake bar is positive(+1) or negative(-1) meaning bullish or bearish hikkake
            Confirmation could come in the next 3 days with:
            - a day that closes higher than the high(lower than the low) of the 3rd candle
            The returned value for the confirmation bar is equal to 1 + the bullish hikkake result or -1 - the bearish hikkake result
            Note: if confirmation and a new hikkake come at the same bar, only the new hikkake is reported(the new hikkake
            overwrites the confirmation of the old hikkake);
            The user should consider that modified hikkake is a reversal pattern, while hikkake could be both a reversal
            or a continuation pattern, so bullish(bearish) modified hikkake is significant when appearing in a downtrend(uptrend)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HikkakeModified.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon">
            <summary>
            Homing Pigeon candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: short black real body completely inside the previous day's body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1): homing pigeon is always bullish;
            The user should consider that homing pigeon is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.HomingPigeon.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows">
            <summary>
            Identical Three Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three consecutive and declining black candlesticks
            - each candle must have no or very short lower shadow
            - each candle after the first must open at or very close to the prior candle's close
            The meaning of "very short" is specified with SetCandleSettings;
            the meaning of "very close" is specified with SetCandleSettings(Equal);
            The returned value is negative(-1): identical three crows is always bearish;
            The user should consider that identical 3 crows is significant when it appears after a mature advance or at high levels,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.IdenticalThreeCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.InNeck">
            <summary>
            In-Neck candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close slightly into previous day body
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): in-neck is always bearish
            The user should consider that in-neck is significant when it appears in a downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InNeck"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.InNeck.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InNeck.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer">
            <summary>
            Inverted Hammer candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - long upper shadow
            - no, or very short, lower shadow
            - gap down
            The meaning of "short", "very short" and "long" is specified with SetCandleSettings;
            The returned value is positive(+1): inverted hammer is always bullish;
            The user should consider that an inverted hammer must appear in a downtrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.InvertedHammer.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Kicking">
            <summary>
            Kicking candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: marubozu
            - second candle: opposite color marubozu
            - gap between the two candles: upside gap if black then white, downside gap if white then black
            The meaning of "long body" and "very short shadow" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Kicking"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Kicking.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Kicking.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength">
            <summary>
            Kicking (bull/bear determined by the longer marubozu) candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: marubozu
            - second candle: opposite color marubozu
            - gap between the two candles: upside gap if black then white, downside gap if white then black
            The meaning of "long body" and "very short shadow" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish; the longer of the two
            marubozu determines the bullishness or bearishness of this pattern
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.KickingByLength"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.KickingByLength.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom">
            <summary>
            Ladder Bottom candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - three black candlesticks with consecutively lower opens and closes
            - fourth candle: black candle with an upper shadow(it's supposed to be not very short)
            - fifth candle: white candle that opens above prior candle's body and closes above prior candle's high
            The meaning of "very short" is specified with SetCandleSettings
            The returned value is positive (+1): ladder bottom is always bullish;
            The user should consider that ladder bottom is significant when it appears in a downtrend,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LadderBottom"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LadderBottom.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji">
            <summary>
            Long Legged Doji candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - one or two long shadows
            The meaning of "doji" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: long legged doji shows uncertainty
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLeggedDoji.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle">
            <summary>
            Long Line Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long real body
            - short upper and lower shadow
            The meaning of "long" and "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.LongLineCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu">
            <summary>
            Marubozu candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - long real body
            - no or very short upper and lower shadow
            The meaning of "long" and "very short" is specified with SetCandleSettings
            The returned value is positive(+1) when white(bullish), negative(-1) when black(bearish)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Marubozu"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Marubozu.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Marubozu.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow">
            <summary>
            Matching Low candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black candle
            - second candle: black candle with the close equal to the previous close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is always positive(+1): matching low is always bullish;
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatchingLow"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatchingLow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MatHold">
            <summary>
            Mat Hold candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - upside gap between the first and the second bodies
            - second candle: small black candle
            - third and fourth candles: falling small real body candlesticks(commonly black) that hold within the long
            white candle's body and are higher than the reaction days of the rising three methods
            - fifth candle: white candle that opens above the previous small candle's close and closes higher than the 
            high of the highest reaction day
            The meaning of "short" and "long" is specified with SetCandleSettings; 
            "hold within" means "a part of the real body must be within";
            penetration is the maximum percentage of the first white body the reaction days can penetrate(it is 
            to specify how much the reaction days should be "higher than the reaction days of the rising three methods")
            The returned value is positive(+1): mat hold is always bullish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MatHold"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MatHold.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MatHold.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar">
            <summary>
            Morning Doji Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black real body
            - second candle: doji gapping down
            - third candle: white real body that moves well within the first candle's real body
            The meaning of "doji" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive(+1): morning doji star is always bullish;
            the user should consider that a morning star is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningDojiStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar">
            <summary>
            Morning Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black real body
            - second candle: star(Short real body gapping down)
            - third candle: white real body that moves well within the first candle's real body
            The meaning of "short" and "long" is specified with SetCandleSettings
            The meaning of "moves well within" is specified with penetration and "moves" should mean the real body should
            not be short ("short" is specified with SetCandleSettings) - Greg Morris wants it to be long, someone else want
            it to be relatively long
            The returned value is positive(+1): morning star is always bullish;
            The user should consider that a morning star is significant when it appears in a downtrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> class.
            </summary>
            <param name="penetration">Percentage of penetration of a candle within another candle</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.MorningStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.MorningStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.MorningStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck">
            <summary>
            On-Neck candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close equal to previous day low
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): on-neck is always bearish
            The user should consider that on-neck is significant when it appears in a downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.OnNeck"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.OnNeck.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.OnNeck.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Piercing">
            <summary>
            Piercing candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: long white candle with open below previous day low and close at least at 50% of previous day
            real body
            The meaning of "long" is specified with SetCandleSettings
            The returned value is positive(+1): piercing pattern is always bullish
            The user should consider that a piercing pattern is significant when it appears in a downtrend, while 
            this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Piercing"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Piercing.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Piercing.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan">
            <summary>
            Rickshaw Man candlestick pattern
            </summary>
            <remarks>
            Must have:
            - doji body
            - two long shadows
            - body near the midpoint of the high-low range
            The meaning of "doji" and "near" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: rickshaw man shows uncertainty
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RickshawMan"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RickshawMan.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods">
            <summary>
            Rising/Falling Three Methods candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white (black) candlestick
            - then: group of falling(rising) small real body candlesticks(commonly black (white)) that hold within
            the prior long candle's range: ideally they should be three but two or more than three are ok too
            - final candle: long white(black) candle that opens above(below) the previous small candle's close 
            and closes above(below) the first long candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings; here only patterns with 3 small candles
            are considered;
            The returned value is positive(+1) or negative(-1)
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.RiseFallThreeMethods.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines">
            <summary>
            Separating Lines candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black (white) candle
            - second candle: bullish(bearish) belt hold with the same open as the prior candle
            The meaning of "long body" and "very short shadow" of the belt hold is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that separating lines is significant when coming in a trend and the belt hold has
            the same direction of the trend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SeparatingLines.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar">
            <summary>
            Shooting Star candlestick pattern
            </summary>
            <remarks>
            Must have:
            - small real body
            - long upper shadow
            - no, or very short, lower shadow
            - gap up from prior real body
            The meaning of "short", "very short" and "long" is specified with SetCandleSettings;
            The returned value is negative(-1): shooting star is always bearish;
            The user should consider that a shooting star must appear in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShootingStar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShootingStar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle">
            <summary>
            Short Line Candle candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - short real body
            - short upper and lower shadow
            The meaning of "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white, negative (-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ShortLineCandle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop">
            <summary>
            Spinning Top candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - small real body
            - shadows longer than the real body
            The meaning of "short" is specified with SetCandleSettings
            The returned value is positive(+1) when white or negative(-1) when black;
            it does not mean bullish or bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.SpinningTop"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.SpinningTop.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern">
            <summary>
            Stalled Pattern candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - first candle: long white
            - second candle: long white with no or very short upper shadow opening within or near the previous white real body
            and closing higher than the prior candle
            - third candle: small white that gaps away or "rides on the shoulder" of the prior long real body(= it's at 
            the upper end of the prior real body)
            The meanings of "long", "very short", "short", "near" are specified with SetCandleSettings;
            The returned value is negative(-1): stalled pattern is always bearish;
            The user should consider that stalled pattern is significant when it appears in uptrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StalledPattern"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StalledPattern.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich">
            <summary>
            Stick Sandwich candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: black candle
            - second candle: white candle that trades only above the prior close(low > prior close)
            - third candle: black candle with the close equal to the first candle's close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is always positive(+1): stick sandwich is always bullish;
            The user should consider that stick sandwich is significant when coming in a downtrend,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.StickSandwich"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.StickSandwich.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Takuri">
            <summary>
            Takuri (Dragonfly Doji with very long lower shadow) candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - doji body
            - open and close at the high of the day = no or very short upper shadow
            - very long lower shadow
            The meaning of "doji", "very short" and "very long" is specified with SetCandleSettings
            The returned value is always positive(+1) but this does not mean it is bullish: takuri must be considered
            relatively to the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Takuri"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Takuri.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Takuri.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap">
            <summary>
            Tasuki Gap candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - upside (downside) gap
            - first candle after the window: white(black) candlestick
            - second candle: black(white) candlestick that opens within the previous real body and closes under(above)
            the previous real body inside the gap
            - the size of two real bodies should be near the same
            The meaning of "near" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that tasuki gap is significant when it appears in a trend, while this function does 
            not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TasukiGap"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TasukiGap.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows">
            <summary>
            Three Black Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three consecutive and declining black candlesticks
            - each candle must have no or very short lower shadow
            - each candle after the first must open within the prior candle's real body
            - the first candle's close should be under the prior white candle's high
            The meaning of "very short" is specified with SetCandleSettings
            The returned value is negative (-1): three black crows is always bearish;
            The user should consider that 3 black crows is significant when it appears after a mature advance or at high levels,
            while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeBlackCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside">
            <summary>
            Three Inside Up/Down candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long white(black) real body
            - second candle: short real body totally engulfed by the first
            - third candle: black(white) candle that closes lower(higher) than the first candle's open
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive (+1) for the three inside up or negative (-1) for the three inside down;
            The user should consider that a three inside up is significant when it appears in a downtrend and a three inside
            down is significant when it appears in an uptrend, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeInside"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeInside.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike">
            <summary>
            Three Line Strike candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white soldiers (three black crows): three white (black) candlesticks with consecutively higher (lower) closes,
            each opening within or near the previous real body
            - fourth candle: black (white) candle that opens above (below) prior candle's close and closes below (above) 
            the first candle's open
            The meaning of "near" is specified with SetCandleSettings;
            The returned value is positive (+1) when bullish or negative (-1) when bearish;
            The user should consider that 3-line strike is significant when it appears in a trend in the same direction of
            the first three candles, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeLineStrike.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside">
            <summary>
            Three Outside Up/Down candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first: black(white) real body
            - second: white(black) real body that engulfs the prior real body
            - third: candle that closes higher(lower) than the second candle
            The returned value is positive (+1) for the three outside up or negative (-1) for the three outside down;
            The user should consider that a three outside up must appear in a downtrend and three outside down must appear
            in an uptrend, while this function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeOutside.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth">
            <summary>
            Three Stars In The South candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle with long lower shadow
            - second candle: smaller black candle that opens higher than prior close but within prior candle's range 
            and trades lower than prior close but not lower than prior low and closes off of its low(it has a shadow)
            - third candle: small black marubozu(or candle with very short shadows) engulfed by prior candle's range
            The meanings of "long body", "short body", "very short shadow" are specified with SetCandleSettings;
            The returned value is positive (+1): 3 stars in the south is always bullish;
            The user should consider that 3 stars in the south is significant when it appears in downtrend, while this function
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeStarsInSouth.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers">
            <summary>
            Three Advancing White Soldiers candlestick pattern
            </summary>
            <remarks>
            Must have:
            - three white candlesticks with consecutively higher closes
            - Greg Morris wants them to be long, Steve Nison doesn't; anyway they should not be short
            - each candle opens within or near the previous white real body
            - each candle must have no or very short upper shadow
            - to differentiate this pattern from advance block, each candle must not be far shorter than the prior candle
            The meanings of "not short", "very short shadow", "far" and "near" are specified with SetCandleSettings;
            here the 3 candles must be not short, if you want them to be long use SetCandleSettings on BodyShort;
            The returned value is positive (+1): advancing 3 white soldiers is always bullish;
            The user should consider that 3 white soldiers is significant when it appears in downtrend, while this function 
            does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.ThreeWhiteSoldiers.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting">
            <summary>
            Thrusting candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: white candle with open below previous day low and close into previous day body under the midpoint;
            to differentiate it from in-neck the close should not be equal to the black candle's close
            The meaning of "equal" is specified with SetCandleSettings
            The returned value is negative(-1): thrusting pattern is always bearish
            The user should consider that the thrusting pattern is significant when it appears in a downtrend and it could be
            even bullish "when coming in an uptrend or occurring twice within several days" (Steve Nison says), while this
            function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Thrusting"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Thrusting.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Thrusting.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.Tristar">
            <summary>
            Tristar candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - 3 consecutive doji days
            - the second doji is a star
            The meaning of "doji" is specified with SetCandleSettings
            The returned value is positive(+1) when bullish or negative(-1) when bearish
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.Tristar"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.Tristar.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.Tristar.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows">
            <summary>
            Two Crows candlestick pattern indicator
            </summary>
            <remarks>
            Must have:
            - first candle: long white candle
            - second candle: black real body
            - gap between the first and the second candle's real bodies
            - third candle: black candle that opens within the second real body and closes within the first real body
            The meaning of "long" is specified with SetCandleSettings
            The returned value is negative (-1): two crows is always bearish;
            The user should consider that two crows is significant when it appears in an uptrend, while this function
            does not consider the trend.
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.TwoCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.TwoCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver">
            <summary>
            Unique Three River candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: long black candle
            - second candle: black harami candle with a lower low than the first candle's low
            - third candle: small white candle with open not lower than the second candle's low, better if its open and 
            close are under the second candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is positive(+1): unique 3 river is always bullish and should appear in a downtrend
            to be significant, while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UniqueThreeRiver.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods">
            <summary>
            Up/Down Gap Three Methods candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: white (black) candle
            - second candle: white(black) candle
            - upside(downside) gap between the first and the second real bodies
            - third candle: black(white) candle that opens within the second real body and closes within the first real body
            The returned value is positive(+1) when bullish or negative(-1) when bearish;
            The user should consider that up/downside gap 3 methods is significant when it appears in a trend, while this
            function does not consider it
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpDownGapThreeMethods.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows">
            <summary>
            Upside Gap Two Crows candlestick pattern
            </summary>
            <remarks>
            Must have:
            - first candle: white candle, usually long
            - second candle: small black real body
            - gap between the first and the second candle's real bodies
            - third candle: black candle with a real body that engulfs the preceding candle
            and closes above the white candle's close
            The meaning of "short" and "long" is specified with SetCandleSettings
            The returned value is negative(-1): upside gap two crows is always bearish;
            The user should consider that an upside gap two crows is significant when it appears in an uptrend,
            while this function does not consider the trend
            </remarks>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows"/> class.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Data.Market.IBaseDataBar},QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CandlestickPatterns.UpsideGapTwoCrows.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ChaikinMoneyFlow">
             <summary>
             The Chaikin Money Flow Index (CMF) is a volume-weighted average of accumulation and distribution over
             a specified period.
            
             CMF = n-day Sum of [(((C - L) - (H - C)) / (H - L)) x Vol] / n-day Sum of Vol
            
             Where:
             n = number of periods, typically 21
             H = high
             L = low
             C = close
             Vol = volume
             
             https://www.fidelity.com/learning-center/trading-investing/technical-analysis/technical-indicator-guide/cmf
             </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ChaikinMoneyFlow._flowRatioSum">
            <summary>
            Holds the point-wise flow-sum and volume terms. 
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChaikinMoneyFlow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChaikinMoneyFlow.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChaikinMoneyFlow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChaikinMoneyFlow.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ChaikinMoneyFlow class
            </summary>
            <param name="name">A name for the indicator</param>
            <param name="period">The period over which to perform computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChaikinMoneyFlow.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ChandeKrollStop">
            <summary>
            This indicator computes the short stop and lower stop values of the Chande Kroll Stop Indicator.
            It is used to determine the optimal placement of a stop-loss order.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeKrollStop.ShortStop">
            <summary>
            Gets the short stop of ChandeKrollStop.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeKrollStop.LongStop">
            <summary>
            Gets the long stop of ChandeKrollStop.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeKrollStop.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeKrollStop.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeKrollStop.#ctor(System.Int32,System.Decimal,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeKrollStop"/> class.
            </summary>
            <param name="atrPeriod">The period over which to compute the average true range.</param>
            <param name="atrMult">The ATR multiplier to be used to compute stops distance.</param>
            <param name="period">The period over which to compute the max of high stop and min of low stop.</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeKrollStop.#ctor(System.String,System.Int32,System.Decimal,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeKrollStop"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="atrPeriod">The period over which to compute the average true range.</param>
            <param name="atrMult">The ATR multiplier to be used to compute stops distance.</param>
            <param name="period">The period over which to compute the max of high stop and min of low stop.</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeKrollStop.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeKrollStop.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ChandeMomentumOscillator">
            <summary>
            This indicator computes the Chande Momentum Oscillator (CMO).
            CMO calculation is mostly identical to RSI.
            The only difference is in the last step of calculation:
            RSI = gain / (gain+loss)
            CMO = (gain-loss) / (gain+loss)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeMomentumOscillator"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.ChandeMomentumOscillator"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeMomentumOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChandeMomentumOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ChandeMomentumOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ChoppinessIndex">
            <summary>
            The ChoppinessIndex indicator is an indicator designed to determine if the market is choppy (trading sideways)
            or not choppy (trading within a trend in either direction)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChoppinessIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ChoppinessIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ChoppinessIndex.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ChoppinessIndex indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period used for rolling windows for highs and lows</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChoppinessIndex.#ctor(System.Int32)">
            <summary>
            Creates a new ChoppinessIndex indicator using the specified period
            </summary>
            <param name="period">The period used for rolling windows for highs and lows</param>
        </member>
        <member name="M:QuantConnect.Indicators.ChoppinessIndex.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ChoppinessIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CommodityChannelIndex">
             <summary>
             Represents the traditional commodity channel index (CCI)
            
             CCI = (Typical Price - 20-period SMA of TP) / (.015 * Mean Deviation)
             Typical Price (TP) = (High + Low + Close)/3
             Constant = 0.015
            
             There are four steps to calculating the Mean Deviation, first, subtract
             the most recent 20-period average of the typical price from each period's
             typical price. Second, take the absolute values of these numbers. Third,
             sum the absolute values. Fourth, divide by the total number of periods (20).
             </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CommodityChannelIndex.K">
            <summary>
            This constant is used to ensure that CCI values fall between +100 and -100, 70% to 80% of the time
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.MovingAverageType">
            <summary>
            Gets the type of moving average
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.TypicalPriceAverage">
            <summary>
            Keep track of the simple moving average of the typical price
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.TypicalPriceMeanDeviation">
            <summary>
            Keep track of the mean absolute deviation of the typical price
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the CommodityChannelIndex class
            </summary>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the CommodityChannelIndex class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the standard deviation and moving average (middle band)</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CommodityChannelIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CommodityChannelIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CompositeIndicator">
            <summary>
            This indicator is capable of wiring up two separate indicators into a single indicator
            such that the output of each will be sent to a user specified function.
            </summary>
            <remarks>
            This type is initialized such that there is no need to call the Update function. This indicator
            will have its values automatically updated each time a new piece of data is received from both
            the left and right indicators.
            </remarks>
        </member>
        <member name="T:QuantConnect.Indicators.CompositeIndicator.IndicatorComposer">
            <summary>
            Delegate type used to compose the output of two indicators into a new value.
            </summary>
            <remarks>
            A simple example would be to compute the difference between the two indicators (such as with MACD)
            (left, right) => left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>And indicator result representing the composition of the two indicators</returns>
        </member>
        <member name="F:QuantConnect.Indicators.CompositeIndicator._composer">
            <summary>function used to compose the individual indicators</summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator.Left">
            <summary>
            Gets the 'left' indicator for the delegate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator.Right">
            <summary>
            Gets the 'right' indicator for the delegate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CompositeIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.#ctor(System.String,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.CompositeIndicator.IndicatorComposer)">
            <summary>
            Creates a new CompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indicator for the 'composer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.#ctor(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.CompositeIndicator.IndicatorComposer)">
            <summary>
            Creates a new CompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indicator for the 'composer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.ValidateAndComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            and returns an instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>An IndicatorResult object including the status of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <remarks>
            Since this class overrides <see cref="M:QuantConnect.Indicators.CompositeIndicator.ValidateAndComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)"/>, this method is a no-op
            </remarks>
            <param name="_">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.CompositeIndicator.ConfigureEventHandlers">
            <summary>
            Configures the event handlers for Left.Updated and Right.Updated to update this instance when
            they both have new data.
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ConstantIndicator`1">
            <summary>
            An indicator that will always return the same value.
            </summary>
            <typeparam name="T">The type of input this indicator takes</typeparam>
        </member>
        <member name="P:QuantConnect.Indicators.ConstantIndicator`1.IsReady">
            <summary>
            Gets true since the ConstantIndicator is always ready to return the same value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.#ctor(System.String,System.Decimal)">
            <summary>
            Creates a new ConstantIndicator that will always return the specified value
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="value">The constant value to be returned</param>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ConstantIndicator`1.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CoppockCurve">
            <summary>
            A momentum indicator developed by Edwin “Sedge” Coppock in October 1965.
            The goal of this indicator is to identify long-term buying opportunities in the S&amp;P500 and Dow Industrials.
            Source: http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:coppock_curve
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CoppockCurve.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.CoppockCurve.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CoppockCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CoppockCurve" /> indicator with its default values.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CoppockCurve.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CoppockCurve"/> indicator
            </summary>
            <param name="shortRocPeriod">The period for the short ROC</param>
            <param name="longRocPeriod">The period for the long ROC</param>
            <param name="lwmaPeriod">The period for the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.CoppockCurve.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.CoppockCurve" /> indicator
            </summary>
            <param name="name">A name for the indicator</param>
            <param name="shortRocPeriod">The period for the short ROC</param>
            <param name="longRocPeriod">The period for the long ROC</param>
            <param name="lwmaPeriod">The period for the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.CoppockCurve.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.CoppockCurve.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Correlation">
            <summary>
            The Correlation Indicator is a valuable tool in technical analysis, designed to quantify the degree of 
            relationship between the price movements of a target security (e.g., a stock or ETF) and a reference 
            market index. It measures how closely the target’s price changes are aligned with the fluctuations of 
            the index over a specific period of time, providing insights into the target’s susceptibility to market 
            movements.
            A positive correlation indicates that the target tends to move in the same direction as the market index, 
            while a negative correlation suggests an inverse relationship. A correlation close to 0 implies a weak or 
            no linear relationship.
            Commonly, the SPX index is employed as the benchmark for the overall market when calculating correlation, 
            ensuring a consistent and reliable reference point. This helps traders and investors make informed decisions 
            regarding the risk and behavior of the target security in relation to market trends.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._targetDataPoints">
            <summary>
            RollingWindow to store the data points of the target symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._referenceDataPoints">
            <summary>
            RollingWindow to store the data points of the reference symbol
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._correlation">
            <summary>
            Correlation of the target used in relation with the reference
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._period">
            <summary>
            Period required for calcualte correlation
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._correlationType">
            <summary>
            Correlation type
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._referenceSymbol">
            <summary>
            Symbol of the reference used
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Correlation._targetSymbol">
            <summary>
            Symbol of the target used
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Correlation.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Correlation.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Correlation.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.CorrelationType)">
            <summary>
            Creates a new Correlation indicator with the specified name, target, reference,  
            and period values
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="correlationType">Correlation type</param>
        </member>
        <member name="M:QuantConnect.Indicators.Correlation.#ctor(QuantConnect.Symbol,QuantConnect.Symbol,System.Int32,QuantConnect.Indicators.CorrelationType)">
            <summary>
            Creates a new Correlation indicator with the specified target, reference,  
            and period values
            </summary>
            <param name="targetSymbol">The target symbol of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="referenceSymbol">The reference symbol of this indicator</param>
            <param name="correlationType">Correlation type</param>
        </member>
        <member name="M:QuantConnect.Indicators.Correlation.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            
            As this indicator is receiving data points from two different symbols,
            it's going to compute the next value when the amount of data points
            of each of them is the same. Otherwise, it will return the last correlation
            value computed
            </summary>
            <param name="input">The input value of this indicator on this time step.
            It can be either from the target or the reference symbol</param>
            <returns>The correlation value of the target used in relation with the reference</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Correlation.ComputeCorrelation">
            <summary>
            Computes the correlation value usuing symbols values
            correlation values assing into _correlation property
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Correlation.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.CorrelationType">
            <summary>
            Defines the different types of Correlation
            </summary>  
        </member>
        <member name="F:QuantConnect.Indicators.CorrelationType.Pearson">
            <summary>
            Pearson Correlation (Product-Moment Correlation):
            Measures the linear relationship between two datasets. The coefficient ranges from -1 to 1.
            A value of 1 indicates a perfect positive linear relationship, -1 indicates a perfect
            negative linear relationship, and 0 indicates no linear relationship.
            It assumes that both datasets are normally distributed and the relationship is linear.
            It is sensitive to outliers which can affect the correlation significantly.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.CorrelationType.Spearman">
            <summary>
            Spearman Correlation (Rank Correlation):
            Measures the strength and direction of the monotonic relationship between two datasets.
            Instead of calculating the coefficient using raw data, it uses the rank of the data points.
            This method is non-parametric and does not assume a normal distribution of the datasets.
            It's useful when the data is not normally distributed or when the relationship is not linear.
            Spearman's correlation is less sensitive to outliers than Pearson's correlation.
            The coefficient also ranges from -1 to 1 with similar interpretations for the values,
            but it reflects monotonic relationships rather than only linear ones.
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Delay">
            <summary>
            An indicator that delays its input for a certain period
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.#ctor(System.Int32)">
            <summary>
            Creates a new Delay indicator that delays its input by the specified period
            </summary>
            <param name="period">The period to delay input, must be greater than zero</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Delay indicator that delays its input by the specified period
            </summary>
            <param name="name">Name of the delay window indicator</param>
            <param name="period">The period to delay input, must be greater than zero</param>
        </member>
        <member name="P:QuantConnect.Indicators.Delay.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Delay.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Delay.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Delta">
            <summary>
            Option Delta indicator that calculate the delta of an option
            </summary>
            <remarks>sensitivity of option price relative to $1 of underlying change</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>am>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Delta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Delta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Delta.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the Delta of the option
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.DeMarkerIndicator">
             <summary>
             In the DeMarker strategy, for some period of size N, set:
             <para>
             DeMax = High - Previous High, and 
             DeMin = Previous Low - Low
             </para>
             where, in the prior, if either term is less than zero (DeMax or DeMin), set it to zero.
             We can now define the indicator itself, DEM, as:
            <para>
             DEM = MA(DeMax)/(MA(DeMax)+MA(DeMin))
            </para>
             where MA denotes a Moving Average of period N.
             
             https://www.investopedia.com/terms/d/demarkerindicator.asp
             </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DeMarkerIndicator.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the DeMarkerIndicator class with the specified period
            </summary>
            <param name="period">The period of the  DeMarker Indicator</param>
            <param name="type">The type of moving average to use in calculations</param>
        </member>
        <member name="M:QuantConnect.Indicators.DeMarkerIndicator.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the DeMarkerIndicator class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the  DeMarker Indicator</param>
            <param name="type">The type of moving average to use in calculations</param>
        </member>
        <member name="P:QuantConnect.Indicators.DeMarkerIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DeMarkerIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DeMarkerIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DeMarkerIndicator.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.DerivativeOscillator">
            <summary>
            Represents the Derivative Oscillator Indicator, utilizing
            a moving average convergence-divergence (MACD) histogram to a double-smoothed relative strength index (RSI).
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DerivativeOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DerivativeOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DerivativeOscillator.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IndicatorDerivativeOscillator class with the specified name and periods.
            </summary>
            <param name="name">The name of the indicator</param>
            <param name="rsiPeriod">The period for the RSI calculation</param>
            <param name="smoothingRsiPeriod">The period for the smoothing RSI</param>
            <param name="doubleSmoothingRsiPeriod">The period for the double smoothing RSI</param>
            <param name="signalLinePeriod">The period for the signal line</param>
        </member>
        <member name="M:QuantConnect.Indicators.DerivativeOscillator.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for the derivative oscillator indicator from the given state
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.DerivativeOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.DetrendedPriceOscillator">
            <summary>
            The Detrended Price Oscillator is an indicator designed to remove trend from price
            and make it easier to identify cycles.
            DPO does not extend to the last date because it is based on a displaced moving average.
            Is estimated as Price {X/2 + 1} periods ago less the X-period simple moving average.
            E.g.DPO(20) equals price 11 days ago less the 20-day SMA.
            </summary>
            <seealso cref="T:QuantConnect.Indicators.IndicatorBase`1" />
        </member>
        <member name="P:QuantConnect.Indicators.DetrendedPriceOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DetrendedPriceOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DetrendedPriceOscillator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DetrendedPriceOscillator" /> class.
            </summary>
            <param name="name">The name for the indicator.</param>
            <param name="period">The number of periods to calculate the DPO.</param>
        </member>
        <member name="M:QuantConnect.Indicators.DetrendedPriceOscillator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DetrendedPriceOscillator" /> class.
            </summary>
            <param name="period">The number of periods to calculate the DPO.</param>
        </member>
        <member name="M:QuantConnect.Indicators.DetrendedPriceOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DetrendedPriceOscillator.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.DonchianChannel">
            <summary>
            This indicator computes the upper and lower band of the Donchian Channel.
            The upper band is computed by finding the highest high over the given period.
            The lower band is computed by finding the lowest low over the given period.
            The primary output value of the indicator is the mean of the upper and lower band for 
            the given timeframe.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.UpperBand">
            <summary>
            Gets the upper band of the Donchian Channel.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.LowerBand">
            <summary>
            Gets the lower band of the Donchian Channel.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="period">The period for both the upper and lower channels.</param>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="upperPeriod">The period for the upper channel.</param>
            <param name="lowerPeriod">The period for the lower channel</param>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="period">The period for both the upper and lower channels.</param>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DonchianChannel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="upperPeriod">The period for the upper channel.</param>
            <param name="lowerPeriod">The period for the lower channel</param>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DonchianChannel.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator, which by convention is the mean value of the upper band and lower band.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.DonchianChannel.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.DoubleExponentialMovingAverage">
            <summary>
            This indicator computes the Double Exponential Moving Average (DEMA).
            The Double Exponential Moving Average is calculated with the following formula:
            EMA2 = EMA(EMA(t,period),period)
            DEMA = 2 * EMA(t,period) - EMA2
            The Generalized DEMA (GD) is calculated with the following formula:
            GD = (volumeFactor+1) * EMA(t,period) - volumeFactor * EMA2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DoubleExponentialMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the DEMA</param>
            <param name="volumeFactor">The volume factor of the DEMA (value must be in the [0,1] range, set to 1 for standard DEMA)</param>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.DoubleExponentialMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the DEMA</param>
            <param name="volumeFactor">The volume factor of the DEMA (value must be in the [0,1] range, set to 1 for standard DEMA)</param>
        </member>
        <member name="P:QuantConnect.Indicators.DoubleExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.DoubleExponentialMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.DoubleExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.EaseOfMovementValue">
            <summary>
            This indicator computes the n-period Ease of Movement Value using the following:
            MID = (high_1 + low_1)/2 - (high_0 + low_0)/2 
            RATIO = (currentVolume/10000) / (high_1 - low_1)
            EMV = MID/RATIO
            _SMA = n-period of EMV
            Returns _SMA
            Source: https://www.investopedia.com/terms/e/easeofmovement.asp
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.EaseOfMovementValue.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.EaseOfMovementValue.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.EaseOfMovementValue.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializeds a new instance of the EaseOfMovement class using the specufued period
            </summary>
            <param name="period">The period over which to perform to computation</param>
            <param name="scale">The size of the number outputed by EMV</param>
        </member>
        <member name="M:QuantConnect.Indicators.EaseOfMovementValue.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new EaseOfMovement indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
            <param name="scale">The size of the number outputed by EMV</param>
        </member>
        <member name="M:QuantConnect.Indicators.EaseOfMovementValue.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A a value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.EaseOfMovementValue.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ExponentialMovingAverage">
            <summary>
            Represents the traditional exponential moving average indicator (EMA).
            When the indicator is ready, the first value of the EMA is equivalent to the simple moving average.
            After the first EMA value, the EMA value is a function of the previous EMA value.
            Therefore, depending on the number of samples
            you feed into the indicator, it can provide different EMA values for a single
            security and lookback period. To make the indicator values consistent
            across time, warm up the indicator with all the trailing security price history.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ExponentialMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ExponentialMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the EMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the ExponentialMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the EMA</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ExponentialMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the EMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the ExponentialMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the EMA</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.SmoothingFactorDefault(System.Int32)">
            <summary>
            Calculates the default smoothing factor for an ExponentialMovingAverage indicator
            </summary>
            <param name="period">The period of the EMA</param>
            <returns>The default smoothing factor</returns>
        </member>
        <member name="P:QuantConnect.Indicators.ExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.FilteredIdentity">
            <summary>
            Represents an indicator that is a ready after ingesting a single sample and
            always returns the same value as it is given if it passes a filter condition
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FilteredIdentity.#ctor(System.String,System.Func{QuantConnect.Data.IBaseData,System.Boolean})">
            <summary>
            Initializes a new instance of the FilteredIdentity indicator with the specified name
            </summary>
            <param name="name">The name of the indicator</param>
            <param name="filter">Filters the IBaseData send into the indicator, if null defaults to true (x => true) which means no filter</param>
        </member>
        <member name="P:QuantConnect.Indicators.FilteredIdentity.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FilteredIdentity.ComputeNextValue(QuantConnect.Data.IBaseData)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.FisherTransform">
             <summary>
             The Fisher transform is a mathematical process which is used to convert any data set to a modified
             data set whose Probability Distribution Function is approximately Gaussian. Once the Fisher transform
             is computed, the transformed data can then be analyzed in terms of it's deviation from the mean.
            
             The equation is y = .5 * ln [ 1 + x / 1 - x ] where
             x is the input
             y is the output
             ln is the natural logarithm
            
             The Fisher transform has much sharper turning points than other indicators such as MACD
            
             For more info, read chapter 1 of Cybernetic Analysis for Stocks and Futures by John F. Ehlers
            
             We are implementing the latest version of this indicator found at Fig. 4 of
             http://www.mesasoftware.com/papers/UsingTheFisherTransform.pdf
             </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FisherTransform class with the default name and period
            </summary>
            <param name="period">The period of the WMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.#ctor(System.String,System.Int32)">
            <summary>
            A Fisher Transform of Prices
            </summary>
            <param name="name">string - the name of the indicator</param>
            <param name="period">The number of periods for the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.FisherTransform.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.FisherTransform.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
             <summary>
             Computes the next value in the transform.
             value1 is a function used to normalize price withing the last _period day range.
             value1 is centered on its midpoint and then doubled so that value1 wil swing between -1 and +1.
             value1 is also smoothed with an exponential moving average whose alpha is 0.33.
            
             Since the smoothing may allow value1 to exceed the _period day price range, limits are introduced to
             preclude the transform from blowing up by having an input larger than unity.
             </summary>
             <param name="input">IndicatorDataPoint - the time and value of the next price</param>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FisherTransform.FisherTransformFunction(System.Double)">
             <summary>
             The Fisher transform is a mathematical process which is used to convert any data set to a modified
             data set whose Probability Distribution Function is approximately Gaussian. Once the Fisher transform
             is computed, the transformed data can then be analyzed in terms of it's deviation from the mean.
            
             The equation is y = .5 * ln [ 1 + x / 1 - x ] where
             x is the input
             y is the output
             ln is the natural logarithm
            
             The Fisher transform has much sharper turning points than other indicators such as MACD
            
             For more info, read chapter 1 of Cybernetic Analysis for Stocks and Futures by John F. Ehlers
             </summary>
             <param name="x">Input</param>
             <returns>Output</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ForceIndex">
            <summary>
            The Force Index is calculated by comparing the current market price with the previous market price 
            and multiplying its difference with the traded volume during a specific time period.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ForceIndex._smoother">
            <summary>
            This indicator is used to smooth the ForceIndex computation
            </summary>
            <remarks>This is not exposed publicly since it is the same value as this indicator, meaning
            that this '_smoother' computers the ForceIndex directly, so exposing it publicly would be duplication</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.ForceIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ForceIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ForceIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new ForceIndex indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The smoothing period used to smooth the instantaneous force index values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.ForceIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new ForceIndex indicator using the specified period and moving average type
            </summary>
            <param name="period">The smoothing period used to smooth the instantenous force index values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the instantenous force index values</param>
        </member>
        <member name="M:QuantConnect.Indicators.ForceIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ForceIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.FractalAdaptiveMovingAverage">
            <summary>
            The Fractal Adaptive Moving Average (FRAMA) by John Ehlers
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FractalAdaptiveMovingAverage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the average class
            </summary>
            <param name="name">The name of the indicator instance</param>
            <param name="n">The window period (must be even). Example value: 16</param>
            <param name="longPeriod">The average period. Example value: 198</param>
        </member>
        <member name="M:QuantConnect.Indicators.FractalAdaptiveMovingAverage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the average class
            </summary>
            <param name="n">The window period (must be even). Example value: 16</param>
            <param name="longPeriod">The average period. Example value: 198</param>
        </member>
        <member name="M:QuantConnect.Indicators.FractalAdaptiveMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the average class
            </summary>
            <param name="n">The window period (must be even). Example value: 16</param>
        </member>
        <member name="M:QuantConnect.Indicators.FractalAdaptiveMovingAverage.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the average value
            </summary>
            <param name="input">The data for the calculation</param>
            <returns>The average value</returns>
        </member>
        <member name="P:QuantConnect.Indicators.FractalAdaptiveMovingAverage.IsReady">
            <summary>
            Returns whether the indicator will return valid results
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.FractalAdaptiveMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FractalAdaptiveMovingAverage.Reset">
            <summary>
            Resets the average to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.FunctionalIndicator`1">
            <summary>
            The functional indicator is used to lift any function into an indicator. This can be very useful
            when trying to combine output of several indicators, or for expression a mathematical equation
            </summary>
            <typeparam name="T">The input type for this indicator</typeparam>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._isReady">
            <summary>function implementation of the IndicatorBase.IsReady property</summary>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._reset">
            <summary>Action used to reset this indicator completely along with any indicators this one is dependent on</summary>
        </member>
        <member name="F:QuantConnect.Indicators.FunctionalIndicator`1._computeNextValue">
            <summary>function implementation of the IndicatorBase.ComputeNextValue method</summary>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.#ctor(System.String,System.Func{`0,System.Decimal},System.Func{QuantConnect.Indicators.IndicatorBase{`0},System.Boolean})">
            <summary>
            Creates a new FunctionalIndicator using the specified functions as its implementation.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="computeNextValue">A function accepting the input value and returning this indicator's output value</param>
            <param name="isReady">A function accepting this indicator and returning true if the indicator is ready, false otherwise</param>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.#ctor(System.String,System.Func{`0,System.Decimal},System.Func{QuantConnect.Indicators.IndicatorBase{`0},System.Boolean},System.Action)">
            <summary>
            Creates a new FunctionalIndicator using the specified functions as its implementation.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="computeNextValue">A function accepting the input value and returning this indicator's output value</param>
            <param name="isReady">A function accepting this indicator and returning true if the indicator is ready, false otherwise</param>
            <param name="reset">Function called to reset this indicator and any indicators this is dependent on</param>
        </member>
        <member name="P:QuantConnect.Indicators.FunctionalIndicator`1.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.FunctionalIndicator`1.Reset">
            <summary>
            Resets this indicator to its initial state, optionally using the reset action passed via the constructor
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Gamma">
            <summary>
            Option Gamma indicator that calculate the gamma of an option
            </summary>
            <remarks>derivative of option price change relative to $1 underlying changes</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>am>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Gamma class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Gamma</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Gamma.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the Gamma of the option
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.HeikinAshi">
            <summary>
            This indicator computes the Heikin-Ashi bar (HA)
            The Heikin-Ashi bar is calculated using the following formulas:
            HA_Close[0] = (Open[0] + High[0] + Low[0] + Close[0]) / 4
            HA_Open[0] = (HA_Open[1] + HA_Close[1]) / 2
            HA_High[0] = MAX(High[0], HA_Open[0], HA_Close[0])
            HA_Low[0] = MIN(Low[0], HA_Open[0], HA_Close[0])
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Open">
            <summary>
            Gets the Heikin-Ashi Open
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.High">
            <summary>
            Gets the Heikin-Ashi High
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Low">
            <summary>
            Gets the Heikin-Ashi Low
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Close">
            <summary>
            Gets the Heikin-Ashi Close
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.Volume">
            <summary>
            Gets the Heikin-Ashi Volume
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.HeikinAshi"/> class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.HeikinAshi"/> class.
            </summary> 
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HeikinAshi.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns> A new value for this indicator </returns>
        </member>
        <member name="M:QuantConnect.Indicators.HeikinAshi.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.HilbertTransform">
            <summary>
            This indicator computes the Hilbert Transform Indicator by John Ehlers.
            By using present and prior price differences, and some feedback, price values are split into their complex number components
            of real (inPhase) and imaginary (quadrature) parts.
            <remark>Source: http://www.technicalanalysis.org.uk/moving-averages/Ehle.pdf</remark>
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HilbertTransform.InPhase">
            <summary>
            Real (inPhase) part of complex number component of price values
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HilbertTransform.Quadrature">
            <summary>
            Imaginary (quadrature) part of complex number component of price values
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HilbertTransform.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HilbertTransform.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HilbertTransform.#ctor(System.String,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            Creates a new Hilbert Transform indicator
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="length">The length of the FIR filter used in the calculation of the Hilbert Transform.
            This parameter determines the number of filter coefficients in the FIR filter.</param>
            <param name="inPhaseMultiplicationFactor">The multiplication factor used in the calculation of the in-phase component of the Hilbert Transform. 
            This parameter adjusts the sensitivity and responsiveness of the transform to changes in the input signal.</param>
            <param name="quadratureMultiplicationFactor">The multiplication factor used in the calculation of the quadrature component of the Hilbert Transform. 
            This parameter also adjusts the sensitivity and responsiveness of the transform to changes in the input signal.</param>
        </member>
        <member name="M:QuantConnect.Indicators.HilbertTransform.#ctor(System.Int32,System.Decimal,System.Decimal)">
            <summary>
            Creates a new Hilbert Transform indicator with default name and default params
            </summary>
            <param name="length">The length of the FIR filter used in the calculation of the Hilbert Transform.
            This parameter determines the number of filter coefficients in the FIR filter.</param>
            <param name="inPhaseMultiplicationFactor">The multiplication factor used in the calculation of the in-phase component
            of the Hilbert Transform. This parameter adjusts the sensitivity and responsiveness of
            the transform to changes in the input signal.</param>
            <param name="quadratureMultiplicationFactor">The multiplication factor used in the calculation of the quadrature component of
            the Hilbert Transform. This parameter also adjusts the sensitivity and responsiveness of the
            transform to changes in the input signal.</param>
        </member>
        <member name="M:QuantConnect.Indicators.HilbertTransform.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.HilbertTransform.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.HullMovingAverage">
            <summary>
            Produces a Hull Moving Average as explained at http://www.alanhull.com/hull-moving-average/
            and derived from the instructions for the Excel VBA code at http://finance4traders.blogspot.com/2009/06/how-to-calculate-hull-moving-average.html
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HullMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            A Hull Moving Average 
            </summary>
            <param name="name">string - a name for the indicator</param>
            <param name="period">int - the number of periods to calculate the HMA - the period of the slower LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.HullMovingAverage.#ctor(System.Int32)">
            <summary>
            A Hull Moving Average.
            </summary>
            <param name="period">int - the number of periods over which to calculate the HMA - the length of the slower LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.HullMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HullMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.HullMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.HullMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.IchimokuKinkoHyo">
            <summary>
            This indicator computes the Ichimoku Kinko Hyo indicator. It consists of the following main indicators:
            Tenkan-sen: (Highest High + Lowest Low) / 2 for the specific period (normally 9)
            Kijun-sen: (Highest High + Lowest Low) / 2 for the specific period (normally 26)
            Senkou A Span: (Tenkan-sen + Kijun-sen )/ 2 from a specific number of periods ago (normally 26)
            Senkou B Span: (Highest High + Lowest Low) / 2 for the specific period (normally 52), from a specific number of periods ago (normally 26)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.Tenkan">
            <summary>
            The Tenkan-sen component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.Kijun">
            <summary>
            The Kijun-sen component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouA">
            <summary>
            The Senkou A Span component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouB">
            <summary>
            The Senkou B Span component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.Chikou">
            <summary>
            The Chikou Span component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.TenkanMaximum">
            <summary>
            The Tenkan-sen Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.TenkanMinimum">
            <summary>
            The Tenkan-sen Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.KijunMaximum">
            <summary>
            The Kijun-sen Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.KijunMinimum">
            <summary>
            The Kijun-sen Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouBMaximum">
            <summary>
            The Senkou B Maximum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.SenkouBMinimum">
            <summary>
            The Senkou B Minimum component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedTenkanSenkouA">
            <summary>
            The Delayed Tenkan Senkou A component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedKijunSenkouA">
            <summary>
            The Delayed Kijun Senkou A component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedMaximumSenkouB">
            <summary>
            The Delayed Maximum Senkou B component of the Ichimoku indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.DelayedMinimumSenkouB">
            <summary>
            The Delayed Minimum Senkou B component of the Ichimoku indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new IchimokuKinkoHyo indicator from the specific periods
            </summary>
            <param name="tenkanPeriod">The Tenkan-sen period</param>
            <param name="kijunPeriod">The Kijun-sen period</param>
            <param name="senkouAPeriod">The Senkou A Span period</param>
            <param name="senkouBPeriod">The Senkou B Span period</param>
            <param name="senkouADelayPeriod">The Senkou A Span delay</param>
            <param name="senkouBDelayPeriod">The Senkou B Span delay</param>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new IchimokuKinkoHyo indicator from the specific periods
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="tenkanPeriod">The Tenkan-sen period</param>
            <param name="kijunPeriod">The Kijun-sen period</param>
            <param name="senkouAPeriod">The Senkou A Span period</param>
            <param name="senkouBPeriod">The Senkou B Span period</param>
            <param name="senkouADelayPeriod">The Senkou A Span delay</param>
            <param name="senkouBDelayPeriod">The Senkou B Span delay</param>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.IsReady">
            <summary>
            Returns true if all of the sub-components of the Ichimoku indicator is ready
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IchimokuKinkoHyo.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IchimokuKinkoHyo.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Identity">
            <summary>
                Represents an indicator that is a ready after ingesting a single sample and
                always returns the same value as it is given.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Identity.#ctor(System.String)">
            <summary>
                Initializes a new instance of the Identity indicator with the specified name
            </summary>
            <param name="name">The name of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Identity.IsReady">
            <summary>
                Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Identity.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Identity.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
                Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ImpliedVolatility">
            <summary>
            Implied Volatility indicator that calculate the IV of an option using Black-Scholes Model
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the ImpliedVolatility class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.SetSmoothingFunction(System.Func{System.Decimal,System.Decimal,System.Decimal})">
            <summary>
            Set the smoothing function of IV, using both call and put IV value
            </summary>
            <param name="function">the smoothing function</param>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.SetSmoothingFunction(Python.Runtime.PyObject)">
            <summary>
            Set the smoothing function of IV, using both call and put IV value
            </summary>
            <param name="function">the smoothing function</param>
        </member>
        <member name="P:QuantConnect.Indicators.ImpliedVolatility.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ImpliedVolatility.CalculateIV(System.Decimal)">
            <summary>
            Computes the IV of the option
            </summary>
            <param name="timeTillExpiry">the time until expiration in years</param>
            <returns>Smoothened IV of the option</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Indicator">
            <summary>
            Represents a type capable of ingesting a piece of data and producing a new piece of data.
            Indicators can be used to filter and transform data into a new, more informative form.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Indicator.DefaultWindowSize">
            <summary>
            The default size of the history window for the indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Indicator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorBase">
            <summary>
            Abstract Indicator base, meant to contain non-generic fields of indicator base to support non-typed inputs
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Consolidators">
            <summary>
            The data consolidators associated with this indicator if any
            </summary>
            <remarks>These references allow us to unregister an indicator from getting future data updates through it's consolidators.
            We need multiple consolitadors because some indicators consume data from multiple different symbols</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Current">
            <summary>
            Gets the current state of this indicator. If the state has not been updated
            then the time on the value will equal DateTime.MinValue.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Previous">
            <summary>
            Gets the previous state of this indicator. If the state has not been updated
            then the time on the value will equal DateTime.MinValue.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Name">
            <summary>
            Gets a name for this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Samples">
            <summary>
            Gets the number of samples processed by this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="E:QuantConnect.Indicators.IndicatorBase.Updated">
            <summary>
            Event handler that fires after this indicator is updated
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Window">
            <summary>
            A rolling window keeping a history of the indicator values of a given period
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.#ctor">
            <summary>
            Initializes a new instance of the Indicator class.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.OnUpdated(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Event invocator for the Updated event
            </summary>
            <param name="consolidated">This is the new piece of data produced by this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.Update(QuantConnect.Data.IBaseData)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="input">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorBase.Item(System.Int32)">
            <summary>
            Indexes the history windows, where index 0 is the most recent indicator value.
            If index is greater or equal than the current count, it returns null.
            If the index is greater or equal than the window size, it returns null and resizes the windows to i + 1.
            </summary>
            <param name="i">The index</param>
            <returns>the ith most recent indicator value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the history window.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the history window.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the history window.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the history window.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.ToString">
            <summary>
            ToString Overload for Indicator Base
            </summary>
            <returns>String representation of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.ToDetailedString">
            <summary>
            Provides a more detailed string of this indicator in the form of {Name} - {Value}
            </summary>
            <returns>A detailed string of this indicator's current state</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.CompareTo(QuantConnect.Indicators.IIndicator)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order.
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Implicit(QuantConnect.Indicators.IndicatorBase)~System.Decimal">
            <summary>
            Returns the current value of this instance
            </summary>
            <param name="instance">The indicator instance</param>
            <returns>The current value of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(QuantConnect.Indicators.IndicatorBase,System.Double)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(System.Double,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(QuantConnect.Indicators.IndicatorBase,System.Single)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(System.Single,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(QuantConnect.Indicators.IndicatorBase,System.Int32)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(System.Int32,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is greater than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is less than the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThan(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThan(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is greater than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is less than or equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_GreaterThanOrEqual(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is greater than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_LessThanOrEqual(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is less than or equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(QuantConnect.Indicators.IndicatorBase,System.Int64)">
            <summary>
            Determines if the indicator's current value is not equal to the specified value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Equality(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is equal to the indicator's current value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase.op_Inequality(System.Int64,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Determines if the specified value is not equal to the indicator's current value
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorBase`1">
            <summary>
            Provides a base type for all indicators
            </summary>
            <typeparam name="T">The type of data input into this indicator</typeparam>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorBase`1._previousInput">
            <summary>the most recent input that was given to this indicator</summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Update(QuantConnect.Data.IBaseData)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="input">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Update(System.DateTime,System.Decimal)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="time">The time associated with the value</param>
            <param name="value">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.ValidateAndComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            and returns an instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>An IndicatorResult object including the status of the indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorBase`1.GetHashCode">
            <summary>
            Get Hash Code for this Object
            </summary>
            <returns>Integer Hash Code</returns>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorExtensions">
            <summary>
            Provides extension methods for Indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Update(QuantConnect.Indicators.IndicatorBase{QuantConnect.Indicators.IndicatorDataPoint},System.DateTime,System.Decimal)">
            <summary>
            Updates the state of this indicator with the given value and returns true
            if this indicator is ready, false otherwise
            </summary>
            <param name="indicator">The indicator to be updated</param>
            <param name="time">The time associated with the value</param>
            <param name="value">The value to use to update this indicator</param>
            <returns>True if this indicator is ready, false otherwise</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Of``1(``0,QuantConnect.Indicators.IIndicator,System.Boolean)">
            <summary>
            Configures the second indicator to receive automatic updates from the first by attaching an event handler
            to first.DataConsolidated
            </summary>
            <param name="second">The indicator that receives data from the first</param>
            <param name="first">The indicator that sends data via DataConsolidated even to the second</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to always send updates to second</param>
            <returns>The reference to the second indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.WeightedBy``2(QuantConnect.Indicators.IndicatorBase{``0},``1,System.Int32)">
            <summary>
            Creates a new CompositeIndicator such that the result will be average of a first indicator weighted by a second one
            </summary>
            <param name="value">Indicator that will be averaged</param>
            <param name="weight">Indicator that provides the average weights</param>
            <param name="period">Average period</param>
            <returns>Indicator that results of the average of first by weights given by second</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and the constant
            </summary>
            <remarks>
            value = left + constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The addend</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and right
            </summary>
            <remarks>
            value = left + right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and right
            </summary>
            <remarks>
            value = left + right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and constant
            </summary>
            <remarks>
            value = left - constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The subtrahend</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and right
            </summary>
            <remarks>
            value = left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and right
            </summary>
            <remarks>
            value = left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the constant
            </summary>
            <remarks>
            value = left/constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value denominator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the right
            </summary>
            <remarks>
            value = left/right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the right
            </summary>
            <remarks>
            value = left/right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left and the constant
            </summary>
            <remarks>
            value = left*constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value to multiple by</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left to the right
            </summary>
            <remarks>
            value = left*right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left to the right
            </summary>
            <remarks>
            value = left*right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.EMA``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Nullable{System.Decimal},System.Boolean)">
            <summary>Creates a new ExponentialMovingAverage indicator with the specified period and smoothingFactor from the left indicator
            </summary>
            <param name="left">The ExponentialMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the ExponentialMovingAverage indicators</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the ExponentialMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MAX(QuantConnect.Indicators.IIndicator,System.Int32,System.Boolean)">
            <summary>Creates a new Maximum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Maximum indicator will be created using the data from left</param>
            <param name="period">The period of the Maximum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the Maximum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MIN``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Boolean)">
            <summary>Creates a new Minimum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Minimum indicator will be created using the data from left</param>
            <param name="period">The period of the Minimum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the Minimum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.SMA``1(QuantConnect.Indicators.IndicatorBase{``0},System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the SimpleMovingAverage class with the specified name and period from the left indicator
            </summary>
            <param name="left">The SimpleMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the SMA</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to always send updates to second</param>
            <returns>The reference to the SimpleMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Of(Python.Runtime.PyObject,Python.Runtime.PyObject,System.Boolean)">
            The methods overloads bellow are due to python.net not being able to correctly solve generic methods overload
            <summary>
            Configures the second indicator to receive automatic updates from the first by attaching an event handler
            to first.DataConsolidated
            </summary>
            <param name="second">The indicator that receives data from the first</param>
            <param name="first">The indicator that sends data via DataConsolidated even to the second</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to always send updates to second</param>
            <returns>The reference to the second indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.WeightedBy(Python.Runtime.PyObject,Python.Runtime.PyObject,System.Int32)">
            <summary>
            Creates a new CompositeIndicator such that the result will be average of a first indicator weighted by a second one
            </summary>
            <param name="value">Indicator that will be averaged</param>
            <param name="weight">Indicator that provides the average weights</param>
            <param name="period">Average period</param>
            <returns>Indicator that results of the average of first by weights given by second</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.EMA(Python.Runtime.PyObject,System.Int32,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Creates a new ExponentialMovingAverage indicator with the specified period and smoothingFactor from the left indicator
            </summary>
            <param name="left">The ExponentialMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the ExponentialMovingAverage indicators</param>
            <param name="smoothingFactor">The percentage of data from the previous value to be carried into the next value</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the ExponentialMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MAX(Python.Runtime.PyObject,System.Int32,System.Boolean)">
            <summary>
            Creates a new Maximum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Maximum indicator will be created using the data from left</param>
            <param name="period">The period of the Maximum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the Maximum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.MIN(Python.Runtime.PyObject,System.Int32,System.Boolean)">
            <summary>
            Creates a new Minimum indicator with the specified period from the left indicator
            </summary>
            <param name="left">The Minimum indicator will be created using the data from left</param>
            <param name="period">The period of the Minimum indicator</param>
            <param name="waitForFirstToReady">True to only send updates to the second if left.IsReady returns true, false to always send updates</param>
            <returns>A reference to the Minimum indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.SMA(Python.Runtime.PyObject,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the SimpleMovingAverage class with the specified name and period from the left indicator
            </summary>
            <param name="left">The SimpleMovingAverage indicator will be created using the data from left</param>
            <param name="period">The period of the SMA</param>
            <param name="waitForFirstToReady">True to only send updates to the second if first.IsReady returns true, false to always send updates to second</param>
            <returns>The reference to the SimpleMovingAverage indicator to allow for method chaining</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(Python.Runtime.PyObject,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the constant
            </summary>
            <remarks>
            value = left/constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value denominator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Over(Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the ratio of the left to the right
            </summary>
            <remarks>
            value = left/right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The ratio of the left to the right indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(Python.Runtime.PyObject,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and constant
            </summary>
            <remarks>
            value = left - constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The subtrahend</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Minus(Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the difference of the left and right
            </summary>
            <remarks>
            value = left - right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The difference of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(Python.Runtime.PyObject,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left and the constant
            </summary>
            <remarks>
            value = left*constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The constant value to multiple by</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Times(Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the product of the left to the right
            </summary>
            <remarks>
            value = left*right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The product of the left to the right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(Python.Runtime.PyObject,System.Decimal)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and the constant
            </summary>
            <remarks>
            value = left + constant
            </remarks>
            <param name="left">The left indicator</param>
            <param name="constant">The addend</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.Plus(Python.Runtime.PyObject,Python.Runtime.PyObject,System.String)">
            <summary>
            Creates a new CompositeIndicator such that the result will be the sum of the left and right
            </summary>
            <remarks>
            value = left + right
            </remarks>
            <param name="left">The left indicator</param>
            <param name="right">The right indicator</param>
            <param name="name">The name of this indicator</param>
            <returns>The sum of the left and right indicators</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorExtensions.GetOverIndicatorComposer">
            <summary>
            Gets the IndicatorComposer for a CompositeIndicator whose result is the ratio of the left to the right
            </summary>
            <returns>The IndicatorComposer for a CompositeIndicator whose result is the ratio of the left to the right</returns>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorResult">
            <summary>
            Represents the result of an indicator's calculations
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorResult.Value">
            <summary>
            The indicator output value
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IndicatorResult.Status">
            <summary>
            The indicator status
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorResult.#ctor(System.Decimal,QuantConnect.Indicators.IndicatorStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.IndicatorResult"/> class
            </summary>
            <param name="value">The value output by the indicator</param>
            <param name="status">The status returned by the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IndicatorResult.op_Implicit(System.Decimal)~QuantConnect.Indicators.IndicatorResult">
            <summary>
            Converts the specified decimal value into a successful indicator result
            </summary>
            <remarks>
            This method is provided for backwards compatibility
            </remarks>
            <param name="value">The decimal value to be converted into an <see cref="T:QuantConnect.Indicators.IndicatorResult"/></param>
        </member>
        <member name="T:QuantConnect.Indicators.IndicatorStatus">
            <summary>
            The possible states returned by <see cref="M:QuantConnect.Indicators.IndicatorBase`1.ComputeNextValue(`0)"/>
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.Success">
            <summary>
            The indicator successfully calculated a value for the input data (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.InvalidInput">
            <summary>
            The indicator detected an invalid input data point or tradebar (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.MathError">
            <summary>
            The indicator encountered a math error during calculations (2)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.IndicatorStatus.ValueNotReady">
            <summary>
            The indicator value is not ready (3)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.InternalBarStrength">
            <summary>
            The InternalBarStrenght indicator is a measure of the relative position of a period's closing price 
            to the same period's high and low.
            The IBS can be interpreted to predict a bullish signal when displaying a low value and a bearish signal when presenting a high value.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.InternalBarStrength.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.InternalBarStrength.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.InternalBarStrength.#ctor(System.String)">
            <summary>
            Creates a new InternalBarStrenght indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.InternalBarStrength.#ctor">
            <summary>
            Creates a new InternalBarStrenght indicator using the specified period and moving average type
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.InternalBarStrength.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.IntradayVwap">
            <summary>
            Defines the canonical intraday VWAP indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.IntradayVwap.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IntradayVwap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.IntradayVwap"/> class
            </summary>
            <param name="name">The name of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.IntradayVwap.ValidateAndComputeNextValue(QuantConnect.Data.BaseData)">
            <summary>
            Computes the new VWAP
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.IntradayVwap.ComputeNextValue(QuantConnect.Data.BaseData)">
            <summary>
            Computes the next value of this indicator from the given state.
            NOTE: This must be overriden since it's abstract in the base, but
            will never be invoked since we've override the validate method above.
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.IntradayVwap.TryGetVolumeAndAveragePrice(QuantConnect.Data.BaseData,System.Decimal@,System.Decimal@)">
            <summary>
            Determines the volume and price to be used for the current input in the VWAP computation
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage">
            <summary>
            This indicator computes the Kaufman Adaptive Moving Average (KAMA).
            The Kaufman Adaptive Moving Average is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:kaufman_s_adaptive_moving_average
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage"/> class using the specified name and period.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the Efficiency Ratio (ER)</param>
            <param name="fastEmaPeriod">The period of the fast EMA used to calculate the Smoothing Constant (SC)</param>
            <param name="slowEmaPeriod">The period of the slow EMA used to calculate the Smoothing Constant (SC)</param>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage"/> class using the specified period.
            </summary>
            <param name="period">The period of the Efficiency Ratio (ER)</param>
            <param name="fastEmaPeriod">The period of the fast EMA used to calculate the Smoothing Constant (SC)</param>
            <param name="slowEmaPeriod">The period of the slow EMA used to calculate the Smoothing Constant (SC)</param>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanAdaptiveMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.KaufmanEfficiencyRatio">
            <summary>
            This indicator computes the Kaufman Efficiency Ratio (KER).
            The Kaufman Efficiency Ratio is calculated as explained here:
            https://www.marketvolume.com/technicalanalysis/efficiencyratio.asp
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KaufmanEfficiencyRatio.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanEfficiencyRatio.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanEfficiencyRatio"/> class using the specified name and period.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the Efficiency Ratio (ER)</param>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanEfficiencyRatio.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.KaufmanEfficiencyRatio"/> class using the specified period.
            </summary>
            <param name="period">The period of the Efficiency Ratio (ER)</param>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanEfficiencyRatio.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.KaufmanEfficiencyRatio.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.KeltnerChannels">
            <summary> 
            This indicator creates a moving average (middle band) with an upper band and lower band
            fixed at k average true range multiples away from the middle band.  
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.MiddleBand">
            <summary>
            Gets the middle band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.UpperBand">
            <summary>
            Gets the upper band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.LowerBand">
            <summary>
            Gets the lower band of the channel
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.AverageTrueRange">
            <summary>
            Gets the average true range
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.#ctor(System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the KeltnerChannels class
            </summary>
            <param name="period">The period of the average true range and moving average (middle band)</param>
            <param name="k">The number of multiplies specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the KeltnerChannels class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the average true range and moving average (middle band)</param>
            <param name="k">The number of multiples specifying the distance between the middle band and upper or lower bands</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.KeltnerChannels.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.KeltnerChannels.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The TradeBar to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.LeastSquaresMovingAverage">
            <summary>
            The Least Squares Moving Average (LSMA) first calculates a least squares regression line
            over the preceding time periods, and then projects it forward to the current period. In
            essence, it calculates what the value would be if the regression line continued.
            Source: https://rtmath.net/assets/docs/finanalysis/html/b3fab79c-f4b2-40fb-8709-fdba43cdb363.htm
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.LeastSquaresMovingAverage._t">
            <summary>
            Array representing the time.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.LeastSquaresMovingAverage.Intercept">
            <summary>
            The point where the regression line crosses the y-axis (price-axis)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.LeastSquaresMovingAverage.Slope">
            <summary>
            The regression line slope
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.LeastSquaresMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/> class.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/> class.
            </summary>
            <param name="period">The number of data points to hold in the window.</param>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window"></param>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="M:QuantConnect.Indicators.LeastSquaresMovingAverage.Reset">
            <summary>
            Resets this indicator and all sub-indicators (Intercept, Slope)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.LinearWeightedMovingAverage">
             <summary>
             Represents the traditional Weighted Moving Average indicator. The weight are linearly
             distributed according to the number of periods in the indicator.
            
             For example, a 4 period indicator will have a numerator of (4 * window[0]) + (3 * window[1]) + (2 * window[2]) + window[3]
             and a denominator of 4 + 3 + 2 + 1 = 10
            
             During the warm up period, IsReady will return false, but the LWMA will still be computed correctly because
             the denominator will be the minimum of Samples factorial or Size factorial and
             the computation iterates over that minimum value.
            
             The RollingWindow of inputs is created when the indicator is created.
             A RollingWindow of LWMAs is not saved.  That is up to the caller.
             </summary>
        </member>
        <member name="P:QuantConnect.Indicators.LinearWeightedMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LinearWeightedMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LinearWeightedMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the LWMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LinearWeightedMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.LogReturn">
            <summary>
            Represents the LogReturn indicator (LOGR)
            - log returns are useful for identifying price convergence/divergence in a given period
            - logr = log (current price / last price in period)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.LogReturn.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the LogReturn class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the LOGR</param>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LogReturn class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.LogReturn.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            - logr = log (current price / last price in period)
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MarketProfile">
            <summary>
            Represents an Indicator of the Market Profile and its attributes
            
            The concept of Market Profile stems from the idea that
            markets have a form of organization determined by time,
            price, and volume.Each day, the market will develop a range
            for the day and a value area, which represents an equilibrium
            point where there are an equal number of buyers and sellers.
            In this area, prices never stay stagnant. They are constantly
            diverging, and Market Profile records this activity for traders
            to interpret.
            
            It can be computed in two modes: TPO (Time Price Opportunity) or VOL (Volume Profile)
            A discussion on the difference between TPO (Time Price Opportunity) 
            and VOL (Volume Profile) chart types: https://jimdaltontrading.com/tpo-vs-volume-profile
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MarketProfile._valueAreaVolumePercentage">
            <summary>
            Percentage of total volume contained in the ValueArea
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MarketProfile._priceRangeRoundOff">
            <summary>
            The range of roundoff to the prices. i.e two decimal places, three decimal places
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile._oldDataPoints">
            <summary>
            Rolling Window to erase old VolumePerPrice values out of the given period
            First item is going to contain Data Point's close value
            
            Second item is going to contain the Volume, which can be 1 or
            the Data Point's volume value
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MarketProfile._volumePerPrice">
            <summary>
            Close values and Volume values in the given period of time.
            Close values are the keys and Volume values the values.
            The list is sorted in ascending order of the keys
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile._totalVolume">
            <summary>
            A rolling sum of the Volume values for the given period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MarketProfile._pointOfControl">
            <summary>
            POC Index
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.VolumePerPrice">
            <summary>
            Get a copy of the _volumePerPrice field
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.ProfileHigh">
            <summary>
            The highest reached close price level during the period.
            That value is called Profile High
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.ProfileLow">
            <summary>
            The lowest reached close price level during the period.
            That value is called Profile Low
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.POCPrice">
            <summary>
            Price where the most trading occured (Point of Control(POC))
            This price is MarketProfile.Current.Value
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.POCVolume">
            <summary>
            Volume where the most tradding occured (Point of Control(POC))
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.ValueAreaVolume">
            <summary>
            The range of price levels in which a specified percentage of all volume 
            was traded during the time period. Typically, this percentage is set 
            to 70% however it is up to the trader’s discretion.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.ValueAreaHigh">
            <summary>
            The highest close price level within the value area
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.ValueAreaLow">
            <summary>
            The lowest close price level within the value area
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MarketProfile.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.#ctor(System.String,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            Creates a new MarkProfile indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="valueAreaVolumePercentage">The percentage of volume contained in the value area</param>
            <param name="priceRangeRoundOff">How many digits you want to round and the precision.
            i.e 0.01 round to two digits exactly. 0.05 by default.</param>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A a value for this indicator, Point of Control (POC) price</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.GetVolume(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Get the Volume value that's going to be used
            </summary>
            <param name="input">Data</param>
            <returns>The Volume value it's going to be used</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.Add(QuantConnect.Data.Market.TradeBar,System.Decimal)">
            <summary>
            Add the new input value to the Close array and Volume dictionary.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <param name="VolumeQuantity">Volume quantity of the data point, it dependes of DefineVolume method.</param>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.GetMax">
            <summary>
            Finds the close price with biggest volume value.
            </summary>
            <returns> Index of the close price with biggest volume value</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.CalculateValueArea">
            <summary>
            Calculate the Value Area Volume and the highest and lowest prices within it (VAH and VAL).
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.Round(System.Decimal)">
            <summary>
            Round the decimal number
            </summary>
            <param name="a">The decimal number to round</param>
            <returns>The rounded decimal number</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MarketProfile.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MassIndex">
            <summary>
            The Mass Index uses the high-low range to identify trend reversals based on range expansions.
            In this sense, the Mass Index is a volatility indicator that does not have a directional
            bias. Instead, the Mass Index identifies range bulges that can foreshadow a reversal of the
            current trend. Developed by Donald Dorsey.
            </summary>
            <seealso cref="T:QuantConnect.Indicators.TradeBarIndicator"/>
        </member>
        <member name="M:QuantConnect.Indicators.MassIndex.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MassIndex"/> class.
            </summary>
            <param name="name">The name for this instance.</param>
            <param name="emaPeriod">The period used by both EMA.</param>
            <param name="sumPeriod">The sum period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.MassIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MassIndex"/> class.
            </summary>
            <param name="emaPeriod">The period used by both EMA.</param>
            <param name="sumPeriod">The sum period.</param>
        </member>
        <member name="P:QuantConnect.Indicators.MassIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MassIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MassIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MassIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.Maximum">
            <summary>
            Represents an indicator capable of tracking the maximum value and how many periods ago it occurred
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Maximum.PeriodsSinceMaximum">
            <summary>
            The number of periods since the maximum value was encountered
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Maximum.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Maximum.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.#ctor(System.Int32)">
            <summary>
            Creates a new Maximum indicator with the specified period
            </summary>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Maximum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <inheritdoc />
        </member>
        <member name="M:QuantConnect.Indicators.Maximum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.McClellanOscillator">
            <summary>
            The McClellan Oscillator is a market breadth indicator which was
            developed by Sherman and Marian McClellan. It is based on the
            difference between the number of advancing and declining periods.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanOscillator.EMAFast">
            <summary>
            Fast period EMA of advance decline difference
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanOscillator.EMASlow">
            <summary>
            Slow period EMA of advance decline difference
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanOscillator.ADDifference">
            <summary>
            The number of advance assets minus the number of decline assets
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.McClellanOscillator"/> class
            <param name="name">The name of the indicator</param>
            <param name="fastPeriod">The fast period of EMA of advance decline difference</param>
            <param name="slowPeriod">The slow period of EMA of advance decline difference</param>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.McClellanOscillator"/> class
            <param name="fastPeriod">The fast period of EMA of advance decline difference</param>
            <param name="slowPeriod">The slow period of EMA of advance decline difference</param>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.Add(QuantConnect.Symbol)">
            <summary>
            Add Tracking asset issue
            </summary>
            <param name="asset">the tracking asset issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanOscillator.Remove(QuantConnect.Symbol)">
            <summary>
            Remove Tracking asset issue
            </summary>
            <param name="asset">the tracking asset issue</param>
        </member>
        <member name="T:QuantConnect.Indicators.McClellanSummationIndex">
            <summary>
            The McClellan Summation Index (MSI) is a market breadth indicator that is based on the rolling average of difference 
            between the number of advancing and declining issues on a stock exchange. It is generally considered as is 
            a long-term version of the <see cref="P:QuantConnect.Indicators.McClellanSummationIndex.McClellanOscillator"/>
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanSummationIndex.Summation">
            <summary>
            The McClellan Summation Index value
            </summary>
            <remarks>Protected for testing</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanSummationIndex.McClellanOscillator">
            <summary>
            The McClellan Oscillator is a market breadth indicator which was developed by Sherman and Marian McClellan. It is based on the difference between the number of advancing and declining periods.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanSummationIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McClellanSummationIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.McClellanSummationIndex"/> class
            <param name="name">The name of the indicator</param>
            <param name="fastPeriod">The fast period of EMA of advance decline difference</param>
            <param name="slowPeriod">The slow period of EMA of advance decline difference</param>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.McClellanSummationIndex"/> class
            <param name="fastPeriod">The fast period of EMA of advance decline difference</param>
            <param name="slowPeriod">The slow period of EMA of advance decline difference</param>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.Add(QuantConnect.Symbol)">
            <summary>
            Add Tracking asset issue
            </summary>
            <param name="asset">the tracking asset issue</param>
        </member>
        <member name="M:QuantConnect.Indicators.McClellanSummationIndex.Remove(QuantConnect.Symbol)">
            <summary>
            Remove Tracking asset issue
            </summary>
            <param name="asset">the tracking asset issue</param>
        </member>
        <member name="T:QuantConnect.Indicators.McGinleyDynamic">
            <summary>
            Represents the McGinley Dynamic (MGD)
            It is a type of moving average that was designed to track the market better 
            than existing moving average indicators.
            It is a technical indicator that improves upon moving average lines by adjusting 
            for shifts in market speed.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.McGinleyDynamic._rollingSum">
            <summary>
            A rolling sum for computing the average for the given period
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McGinleyDynamic.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.McGinleyDynamic.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.McGinleyDynamic.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the McGinleyDynamic class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the McGinley Dynamic</param>
        </member>
        <member name="M:QuantConnect.Indicators.McGinleyDynamic.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the McGinleyDynamic class with the default name and period
            </summary>
            <param name="period">The period of the McGinley Dynamic</param>
        </member>
        <member name="M:QuantConnect.Indicators.McGinleyDynamic.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.McGinleyDynamic.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MeanAbsoluteDeviation">
            <summary>
            This indicator computes the n-period mean absolute deviation.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MeanAbsoluteDeviation.Mean">
            <summary>
            Gets the mean used to compute the deviation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the MeanAbsoluteDeviation class with the specified period.
            
             Evaluates the mean absolute deviation of samples in the lookback period.
             </summary>
             <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.#ctor(System.String,System.Int32)">
             <summary>
             Initializes a new instance of the MeanAbsoluteDeviation class with the specified period.
            
             Evaluates the mean absolute deviation of samples in the look-back period.
             </summary>
             <param name="name">The name of this indicator</param>
             <param name="period">The sample size of the mean absolute deviation</param>
        </member>
        <member name="P:QuantConnect.Indicators.MeanAbsoluteDeviation.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MeanAbsoluteDeviation.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MeanAbsoluteDeviation.Reset">
            <summary>
            Resets this indicator and its sub-indicator Mean to their initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MidPoint">
            <summary>
            This indicator computes the MidPoint (MIDPOINT)
            The MidPoint is calculated using the following formula:
            MIDPOINT = (Highest Value + Lowest Value) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPoint"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the MIDPOINT</param>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPoint"/> class using the specified period.
            </summary> 
            <param name="period">The period of the MIDPOINT</param>
        </member>
        <member name="P:QuantConnect.Indicators.MidPoint.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MidPoint.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MidPoint.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MidPrice">
            <summary>
            This indicator computes the MidPrice (MIDPRICE).
            The MidPrice is calculated using the following formula:
            MIDPRICE = (Highest High + Lowest Low) / 2
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPrice"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the MIDPRICE</param>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MidPrice"/> class using the specified period.
            </summary> 
            <param name="period">The period of the MIDPRICE</param>
        </member>
        <member name="P:QuantConnect.Indicators.MidPrice.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MidPrice.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MidPrice.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Minimum">
            <summary>
            Represents an indicator capable of tracking the minimum value and how many periods ago it occurred
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Minimum.PeriodsSinceMinimum">
            <summary>
            The number of periods since the minimum value was encountered
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Minimum.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Minimum.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.#ctor(System.Int32)">
            <summary>
            Creates a new Minimum indicator with the specified period
            </summary>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Minimum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <inheritdoc />
        </member>
        <member name="M:QuantConnect.Indicators.Minimum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Momentum">
            <summary>
            This indicator computes the n-period change in a value using the following:
            value_0 - value_n
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Momentum.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Momentum.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.#ctor(System.Int32)">
            <summary>
            Creates a new Momentum indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Momentum indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.Momentum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MomentumPercent">
             <summary>
             This indicator computes the n-period percentage rate of change in a value using the following:
             100 * (value_0 - value_n) / value_n
            
             This indicator yields the same results of RateOfChangePercent
             </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomentumPercent.#ctor(System.Int32)">
            <summary>
            Creates a new MomentumPercent indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.MomentumPercent.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new MomentumPercent indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="T:QuantConnect.Indicators.MomersionIndicator">
            <summary> 
            Oscillator indicator that measures momentum and mean-reversion over a specified
            period n.
            Source: Harris, Michael. "Momersion Indicator." Price Action Lab.,
                        13 Aug. 2015. Web. http://www.priceactionlab.com/Blog/2015/08/momersion-indicator/.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MomersionIndicator._minPeriod">
            <summary>
            The minimum observations needed to consider the indicator ready. After that observation
            number is reached, the indicator will continue gathering data until the full period.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MomersionIndicator._multipliedDiffWindow">
            <summary>
            The rolling window used to store the momentum.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.String,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="minPeriod">The minimum period.</param>
            <param name="fullPeriod">The full period.</param>
            <exception cref="T:System.ArgumentException">The minimum period should be greater of 3.;minPeriod</exception>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="minPeriod">The minimum period.</param>
            <param name="fullPeriod">The full period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.MomersionIndicator"/> class.
            </summary>
            <param name="fullPeriod">The full period.</param>
        </member>
        <member name="P:QuantConnect.Indicators.MomersionIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MomersionIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MomersionIndicator.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window"></param>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="T:QuantConnect.Indicators.MoneyFlowIndex">
             <summary>
             The Money Flow Index (MFI) is an oscillator that uses both price and volume to
             measure buying and selling pressure
            
             Typical Price = (High + Low + Close)/3
             Money Flow = Typical Price x Volume
             Positive Money Flow = Sum of the money flows of all days where the typical
                 price is greater than the previous day's typical price
             Negative Money Flow = Sum of the money flows of all days where the typical
                 price is less than the previous day's typical price
             Money Flow Ratio = (14-period Positive Money Flow)/(14-period Negative Money Flow)
            
             Money Flow Index = 100 x  Positive Money Flow / ( Positive Money Flow + Negative Money Flow)
             </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.PositiveMoneyFlow">
            <summary>
            The sum of positive money flow to compute money flow ratio
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.NegativeMoneyFlow">
            <summary>
            The sum of negative money flow to compute money flow ratio
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.PreviousTypicalPrice">
            <summary>
            The current and previous typical price is used to determine positive or negative money flow
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MoneyFlowIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MoneyFlowIndex class
            </summary>
            <param name="period">The period of the negative and positive money flow</param>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the MoneyFlowIndex class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the negative and positive money flow</param>
        </member>
        <member name="M:QuantConnect.Indicators.MoneyFlowIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageConvergenceDivergence">
            <summary>
            This indicator creates two moving averages defined on a base indicator and produces the difference
            between the fast and slow averages.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Fast">
            <summary>
            Gets the fast average indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Slow">
            <summary>
            Gets the slow average indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Signal">
            <summary>
            Gets the signal of the MACD
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Histogram">
            <summary>
            Developed by Thomas Aspray in 1986, the MACD-Histogram measures the distance between MACD and its signal line, 
            is an oscillator that fluctuates above and below the zero line.
            Bullish or bearish divergences in the MACD-Histogram can alert chartists to an imminent signal line crossover in MACD.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.MovingAverageConvergenceDivergence.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.#ctor(System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new MACD with the specified parameters
            </summary>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="signalPeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.#ctor(System.String,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new MACD with the specified parameters
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="signalPeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageConvergenceDivergence.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageType">
            <summary>
            Defines the different types of moving averages
            </summary>  
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Simple">
            <summary>
            An unweighted, arithmetic mean (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Exponential">
            <summary>
            The standard exponential moving average, using a smoothing factor of 2/(n+1) (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Wilders">
            <summary>
            An exponential moving average, using a smoothing factor of 1/n and simple moving average as seeding (2)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.LinearWeightedMovingAverage">
            <summary>
            A weighted moving average type (3)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.DoubleExponential">
            <summary>
            The double exponential moving average (4)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.TripleExponential">
            <summary>
            The triple exponential moving average (5)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Triangular">
            <summary>
            The triangular moving average (6)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.T3">
            <summary>
            The T3 moving average (7)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Kama">
            <summary>
            The Kaufman Adaptive Moving Average (8)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Hull">
            <summary>
            The Hull Moving Average (9)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Alma">
            <summary>
            The Arnaud Legoux Moving Average (10)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.Zlema">
            <summary>
            The Zero Lag Exponential Moving Average (11)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.MovingAverageType.MGD">
            <summary>
            The McGinley Dynamic moving average (12)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.MovingAverageTypeExtensions">
            <summary>
            Provides extension methods for the MovingAverageType enumeration
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageTypeExtensions.AsIndicator(QuantConnect.Indicators.MovingAverageType,System.Int32)">
            <summary>
            Creates a new indicator from the specified MovingAverageType. So if MovingAverageType.Simple
            is specified, then a new SimpleMovingAverage will be returned.
            </summary>
            <param name="movingAverageType">The type of averaging indicator to create</param>
            <param name="period">The smoothing period</param>
            <returns>A new indicator that matches the MovingAverageType</returns>
        </member>
        <member name="M:QuantConnect.Indicators.MovingAverageTypeExtensions.AsIndicator(QuantConnect.Indicators.MovingAverageType,System.String,System.Int32)">
            <summary>
            Creates a new indicator from the specified MovingAverageType. So if MovingAverageType.Simple
            is specified, then a new SimpleMovingAverage will be returned.
            </summary>
            <param name="movingAverageType">The type of averaging indicator to create</param>
            <param name="name">The name of the new indicator</param>
            <param name="period">The smoothing period</param>
            <returns>A new indicator that matches the MovingAverageType</returns>
        </member>
        <member name="T:QuantConnect.Indicators.NormalizedAverageTrueRange">
            <summary>
            This indicator computes the Normalized Average True Range (NATR).
            The Normalized Average True Range is calculated with the following formula:
            NATR = (ATR(period) / Close) * 100
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.NormalizedAverageTrueRange"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the NATR</param>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.NormalizedAverageTrueRange"/> class using the specified period.
            </summary> 
            <param name="period">The period of the NATR</param>
        </member>
        <member name="P:QuantConnect.Indicators.NormalizedAverageTrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.NormalizedAverageTrueRange.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.NormalizedAverageTrueRange.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.OnBalanceVolume">
            <summary>
            This indicator computes the On Balance Volume (OBV). 
            The On Balance Volume is calculated by determining the price of the current close price and previous close price.
            If the current close price is equivalent to the previous price the OBV remains the same,
            If the current close price is higher the volume of that day is added to the OBV, while a lower close price will
            result in negative value.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.#ctor">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary> 
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Indicator class using the specified name.
            </summary> 
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.OnBalanceVolume.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OnBalanceVolume.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns> A new value for this indicator </returns>
        </member>
        <member name="M:QuantConnect.Indicators.OnBalanceVolume.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.OptionGreeksIndicatorBase">
            <summary>
            To provide a base class for option greeks indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionGreeksIndicatorBase._greekValue">
            <summary>
            Cache of the current value of the greek
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionGreeksIndicatorBase.ImpliedVolatility">
            <summary>
            Gets the implied volatility of the option
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the OptionGreeksIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate the Greek</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the OptionGreeksIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate the Greek</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the OptionGreeksIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate the Greek</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the OptionGreeksIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate the Greek</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the OptionGreeksIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate the Greek</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="P:QuantConnect.Indicators.OptionGreeksIndicatorBase.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of the option greek indicator
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the greek of the option
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreeksIndicatorBase.Reset">
            <summary>
            Resets this indicator and all sub-indicators
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.OptionGreekIndicatorsHelper">
            <summary>
            Helper class for option greeks related indicators
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.OptionGreekIndicatorsHelper.Steps">
            <summary>
            Number of steps in binomial tree simulation to obtain Greeks/IV
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreekIndicatorsHelper.BlackTheoreticalPrice(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,QuantConnect.OptionRight)">
            <summary>
            Returns the Black theoretical price for the given arguments
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreekIndicatorsHelper.CRRTheoreticalPrice(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,QuantConnect.OptionRight,System.Int32)">
            <summary>
            Creates a Binomial Theoretical Price Tree from the given parameters
            </summary>
            <remarks>Reference: https://en.wikipedia.org/wiki/Binomial_options_pricing_model#Step_1:_Create_the_binomial_price_tree</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.OptionGreekIndicatorsHelper.ForwardTreeTheoreticalPrice(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Decimal,QuantConnect.OptionRight,System.Int32)">
            <summary>
            Creates the Forward Binomial Theoretical Price Tree from the given parameters
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.OptionIndicatorBase">
            <summary>
            To provide a base class for option indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.OptionSymbol">
            <summary>
            Option's symbol object
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase._oppositeOptionSymbol">
            <summary>
            Mirror option symbol (by option right), for implied volatility
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase._underlyingSymbol">
            <summary>
            Underlying security's symbol object
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase._optionModel">
            <summary>
            Option pricing model used to calculate indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase._riskFreeInterestRateModel">
            <summary>
            Risk-free rate model
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase._dividendYieldModel">
            <summary>
            Dividend yield model, for continuous dividend yield
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.Expiry">
            <summary>
            Gets the expiration time of the option
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.Right">
            <summary>
            Gets the option right (call/put) of the option
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.Strike">
            <summary>
            Gets the strike price of the option
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.Style">
            <summary>
            Gets the option style (European/American) of the option
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.RiskFreeRate">
            <summary>
            Risk Free Rate
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.DividendYield">
            <summary>
            Dividend Yield
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.Price">
            <summary>
            Gets the option price level
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.OppositePrice">
            <summary>
            Gets the mirror option price level, for implied volatility
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.UnderlyingPrice">
            <summary>
            Gets the underlying's price level
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.UseMirrorContract">
            <summary>
            Flag if mirror option is implemented for parity type calculation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionIndicatorBase.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Int32)">
            <summary>
            Initializes a new instance of the OptionIndicatorBase class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="period">The lookback period of volatility</param>
            <param name="optionModel">The option pricing model used to estimate the Greek/IV</param>
        </member>
        <member name="P:QuantConnect.Indicators.OptionIndicatorBase.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionIndicatorBase.Reset">
            <summary>
            Resets this indicator and all sub-indicators
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.OptionIndicatorBase.GetOptionModel(System.Nullable{QuantConnect.Indicators.OptionPricingModelType},QuantConnect.OptionStyle)">
            <summary>
            Gets the option pricing model based on the option style, if not specified
            </summary>
            <param name="optionModel">The optional option pricing model, which will be returned if not null</param>
            <param name="optionStyle">The option style</param>
            <returns>The option pricing model based on the option style, if not specified</returns>
        </member>
        <member name="T:QuantConnect.Indicators.OptionPricingModelType">
            <summary>
            Defines different types of option pricing model
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.OptionPricingModelType.BlackScholes">
            <summary>
            Vanilla Black Scholes Model
            </summary>
            <remarks>Preferred on calculating greeks for European options, and IV for all options</remarks>
        </member>
        <member name="F:QuantConnect.Indicators.OptionPricingModelType.BinomialCoxRossRubinstein">
            <summary>
            The Cox-Ross-Rubinstein binomial tree model (CRR model)
            </summary>
            <remarks>Preferred on calculating greeks for American options</remarks>
        </member>
        <member name="F:QuantConnect.Indicators.OptionPricingModelType.ForwardTree">
            <summary>
            The forward binomial tree model, or Cox-Ross-Rubinstein with drift model
            </summary>
            <remarks>Preferred on replicating IB IV for American options</remarks>
        </member>
        <member name="T:QuantConnect.Indicators.ParabolicStopAndReverse">
            <summary>
            Parabolic SAR Indicator 
            Based on TA-Lib implementation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Create new Parabolic SAR
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="afStart">Acceleration factor start value</param>
            <param name="afIncrement">Acceleration factor increment value</param>
            <param name="afMax">Acceleration factor max value</param>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.#ctor(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Create new Parabolic SAR
            </summary>
            <param name="afStart">Acceleration factor start value</param>
            <param name="afIncrement">Acceleration factor increment value</param>
            <param name="afMax">Acceleration factor max value</param>
        </member>
        <member name="P:QuantConnect.Indicators.ParabolicStopAndReverse.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ParabolicStopAndReverse.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The trade bar input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.Init(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Initialize the indicator values 
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.HandleLongPosition(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Calculate indicator value when the position is long
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ParabolicStopAndReverse.HandleShortPosition(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Calculate indicator value when the position is short
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.PercentagePriceOscillator">
            <summary>
            This indicator computes the Percentage Price Oscillator (PPO)
            The Percentage Price Oscillator is calculated using the following formula:
            PPO[i] = 100 * (FastMA[i] - SlowMA[i]) / SlowMA[i]
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.#ctor(System.String,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.PercentagePriceOscillator"/> class using the specified name and parameters.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.#ctor(System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.PercentagePriceOscillator"/> class using the specified parameters.
            </summary> 
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="movingAverageType">The type of moving average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.PercentagePriceOscillator.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.PivotPointsHighLow">
            <summary>
            Pivot Points (High/Low), also known as Bar Count Reversals, indicator.
            https://www.fidelity.com/learning-center/trading-investing/technical-analysis/technical-indicator-guide/pivot-points-high-low
            </summary>
        </member>
        <member name="E:QuantConnect.Indicators.PivotPointsHighLow.NewPivotPointFormed">
            <summary>
            Event informs of new pivot point formed with new data update
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PivotPointsHighLow.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PivotPointsHighLow.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Indicators.PivotPointsHighLow"/> indicator with an equal high and low length
            </summary>
            <param name="surroundingBarsCount">The length parameter here defines the number of surrounding bars that we compare against the current bar high and lows for the max/min </param>
            <param name="lastStoredValues">The number of last stored indicator values</param>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Indicators.PivotPointsHighLow"/> indicator
            </summary>
            <param name="surroundingBarsCountForHighPoint">The number of surrounding bars whose high values should be less than the current bar's for the bar high to be marked as high pivot point</param>
            <param name="surroundingBarsCountForLowPoint">The number of surrounding bars whose low values should be more than the current bar's for the bar low to be marked as low pivot point</param>
            <param name="lastStoredValues">The number of last stored indicator values</param>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Indicators.PivotPointsHighLow"/> indicator
            </summary>
            <param name="name">The name of an indicator</param>
            <param name="surroundingBarsCountForHighPoint">The number of surrounding bars whose high values should be less than the current bar's for the bar high to be marked as high pivot point</param>
            <param name="surroundingBarsCountForLowPoint">The number of surrounding bars whose low values should be more than the current bar's for the bar low to be marked as low pivot point</param>
            <param name="lastStoredValues">The number of last stored indicator values</param>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.FindNextLowPivotPoint(QuantConnect.Indicators.RollingWindow{QuantConnect.Data.Market.IBaseDataBar},System.Int32)">
            <summary>
            Looks for the next low pivot point.
            </summary>
            <param name="windowLows">rolling window that tracks the lows</param>
            <param name="midPointIndexOrSurroundingBarsCount">The midpoint index or surrounding bars count for lows</param>
            <returns>pivot point if found else null</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.FindNextHighPivotPoint(QuantConnect.Indicators.RollingWindow{QuantConnect.Data.Market.IBaseDataBar},System.Int32)">
            <summary>
            Looks for the next high pivot point.
            </summary>
            <param name="windowHighs">rolling window that tracks the highs</param>
            <param name="midPointIndexOrSurroundingBarsCount">The midpoint index or surrounding bars count for highs</param>
            <returns>pivot point if found else null</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.ConvertToComputedValue(QuantConnect.Indicators.PivotPoint,QuantConnect.Indicators.PivotPoint)">
            <summary>
            Method for converting high and low pivot points to a decimal value.
            </summary>
            <param name="highPoint">new high point or null</param>
            <param name="lowPoint">new low point or null</param>
            <returns>a decimal value representing the values of high and low pivot points</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.GetHighPivotPointsArray">
            <summary>
            Get current high pivot points, in the order such that first element in collection is the nearest to the present date
            </summary>
            <returns>An array of high pivot points.</returns>
            <remarks>Returned array can be empty if no points have been registered yet/</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.GetLowPivotPointsArray">
            <summary>
            Get current low pivot points, in the order such that first element in collection is the nearest to the present date
            </summary>
            <returns>An array of low pivot points.</returns>
            <remarks>Returned array can be empty if no points have been registered yet/</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.GetAllPivotPointsArray">
            <summary>
            Get all pivot points, in the order such that first element in collection is the nearest to the present date
            </summary>
            <returns>An array of low and high pivot points. Ordered by time in descending order.</returns>
            <remarks>Returned array can be empty if no points have been registered yet/</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsHighLow.OnNewPivotPointFormed(QuantConnect.Indicators.PivotPoint)">
            <summary>
            Invokes NewPivotPointFormed event
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.PivotPoint">
            <summary>
            Represents the points identified by Pivot Point High/Low Indicator.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PivotPoint.PivotPointType">
            <summary>
            Represents pivot point type : High or Low
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PivotPoint.Value">
            <summary>
            Peak value
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPoint.#ctor(QuantConnect.Indicators.PivotPointType,System.Decimal,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Indicators.PivotPoint"/>
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.PivotPointType">
            <summary>
            Pivot point direction
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.PivotPointType.Low">
            <summary>
            Low pivot point (-1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.PivotPointType.None">
            <summary>
            No pivot point (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.PivotPointType.High">
            <summary>
            High pivot point (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.PivotPointType.Both">
            <summary>
            Both high and low pivot point (2)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.PivotPointsEventArgs">
            <summary>
            Event arguments class for the <see cref="E:QuantConnect.Indicators.PivotPointsHighLow.NewPivotPointFormed"/> event
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PivotPointsEventArgs.PivotPoint">
            <summary>
            New pivot point
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PivotPointsEventArgs.#ctor(QuantConnect.Indicators.PivotPoint)">
            <summary>
            Creates a new instance of <see cref="T:QuantConnect.Indicators.PivotPointsEventArgs"/>
            </summary>
            <param name="pivotPoint"></param>
        </member>
        <member name="T:QuantConnect.Indicators.PythonIndicator">
            <summary>
            Provides a wrapper for <see cref="T:QuantConnect.Indicators.IndicatorBase`1"/> implementations written in python
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.#ctor">
            <summary>
            Initializes a new instance of the PythonIndicator class using the specified name.
            </summary>
            <remarks>This overload allows inheritance for python classes with no arguments</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.#ctor(Python.Runtime.PyObject[])">
            <summary>
            Initializes a new instance of the PythonIndicator class using the specified name.
            </summary>
            <remarks>This overload allows inheritance for python classes with multiple arguments</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.#ctor(Python.Runtime.PyObject)">
            <summary>
            Initializes a new instance of the PythonIndicator class using the specified name.
            </summary>
            <param name="indicator">The python implementation of <see cref="T:QuantConnect.Indicators.IndicatorBase`1"/></param>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.SetIndicator(Python.Runtime.PyObject)">
            <summary>
            Sets the python implementation of the indicator
            </summary>
            <param name="indicator">The python implementation of <see cref="T:QuantConnect.Indicators.IndicatorBase`1"/></param>
        </member>
        <member name="P:QuantConnect.Indicators.PythonIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.PythonIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.ComputeNextValue(QuantConnect.Data.IBaseData)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.GetIndicatorWarmUpPeriod">
            <summary>
            Get the indicator WarmUpPeriod parameter. If not defined, use 0
            </summary>
            <returns>The WarmUpPeriod of the indicator.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.PythonIndicator.GetIndicatorName(Python.Runtime.PyObject)">
            <summary>
            Get the indicator Name. If not defined, use the class name
            </summary>
            <param name="indicator">The python implementation of <see cref="T:QuantConnect.Indicators.IndicatorBase`1"/></param>
            <returns>The indicator Name.</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChange">
            <summary>
            This indicator computes the n-period rate of change in a value using the following:
            (value_0 - value_n) / value_n
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RateOfChange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RateOfChange.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            Our formula is Period + 1 because we need to fill the window and have one removed before
            it is ready.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.#ctor(System.Int32)">
            <summary>
            Creates a new RateOfChange indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new RateOfChange indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChange.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChangePercent">
            <summary>
            This indicator computes the n-period percentage rate of change in a value using the following:
            100 * (value_0 - value_n) / value_n
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.#ctor(System.Int32)">
            <summary>
            Creates a new RateOfChangePercent indicator with the specified period
            </summary>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new RateOfChangePercent indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to perform to computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangePercent.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RateOfChangeRatio">
            <summary>
            This indicator computes the Rate Of Change Ratio (ROCR). 
            The Rate Of Change Ratio is calculated with the following formula:
            ROCR = price / prevPrice
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RateOfChangeRatio"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the ROCR</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RateOfChangeRatio"/> class using the specified period.
            </summary> 
            <param name="period">The period of the ROCR</param>
        </member>
        <member name="M:QuantConnect.Indicators.RateOfChangeRatio.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.RegressionChannel">
            <summary>
            The Regression Channel indicator extends the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/>
            with the inclusion of two (upper and lower) channel lines that are distanced from
            the linear regression line by a user defined number of standard deviations.
            Reference: http://www.onlinetradingconcepts.com/TechnicalAnalysis/LinRegChannel.html
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.RegressionChannel._standardDeviation">
            <summary>
            Gets the standard deviation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.LinearRegression">
            <summary>
            Gets the linear regression
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.UpperChannel">
            <summary>
            Gets the upper channel (linear regression + k * stdDev)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.LowerChannel">
            <summary>
            Gets the lower channel (linear regression - k * stdDev)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.Intercept">
            <summary>
            The point where the regression line crosses the y-axis (price-axis)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.Slope">
            <summary>
            The regression line slope
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RegressionChannel.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RegressionChannel.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RegressionChannel"/> class.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
            <param name="k">The number of standard deviations specifying the distance between the linear regression and upper or lower channel lines</param>
        </member>
        <member name="M:QuantConnect.Indicators.RegressionChannel.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.LeastSquaresMovingAverage"/> class.
            </summary>
            <param name="period">The number of data points to hold in the window.</param>
            <param name="k">The number of standard deviations specifying the distance between the linear regression and upper or lower channel lines</param>
        </member>
        <member name="M:QuantConnect.Indicators.RegressionChannel.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>
            A new value for this indicator
            </returns>
        </member>
        <member name="M:QuantConnect.Indicators.RegressionChannel.Reset">
            <summary>
            Resets this indicator and all sub-indicators (StandardDeviation, LowerBand, MiddleBand, UpperBand)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeDailyVolume">
            <summary>
            The Relative Daily Volume indicator is an indicator that compares current 
            cumulative volume to the cumulative volume for a given 
            time of day, measured as a ratio.
            
            Current volume from open to current time of day / Average over the past x days from open to current time of day
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeDailyVolume.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeDailyVolume.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RelativeDailyVolume class using the specified period
            </summary>
            <param name="period">The period over which to perform the computation</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeDailyVolume.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new RelativeDailyVolume indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeDailyVolume.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A a value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeDailyVolume.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeMovingAverage">
            <summary>
            Represents the relative moving average indicator (RMA).
            RMA = SMA(3 x Period) - SMA(2 x Period) + SMA(1 x Period) per formula:
            https://www.hybrid-solutions.com/plugins/client-vtl-plugins/free/rma.html
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeMovingAverage.ShortAverage">
            <summary>
            Gets the Short Term SMA with 1 x Period of RMA
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeMovingAverage.MediumAverage">
            <summary>
            Gets the Medium Term SMA with 2 x Period of RMA
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeMovingAverage.LongAverage">
            <summary>
            Gets the Long Term SMA with 3 x Period of RMA
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the RelativeMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the RMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SimpleMovingAverage class with the default name and period
            </summary>
            <param name="period"></param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Copmutes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeStrengthIndex">
            <summary>
            Represents the  Relative Strength Index (RSI) developed by K. Welles Wilder.
            You can optionally specified a different moving average type to be used in the computation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.MovingAverageType">
            <summary>
            Gets the type of indicator used to compute AverageGain and AverageLoss
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.AverageLoss">
            <summary>
            Gets the EMA for the down days
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.AverageGain">
            <summary>
            Gets the indicator for average gain
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the RelativeStrengthIndex class with the specified name and period
            </summary>
            <param name="period">The period used for up and down days</param>
            <param name="movingAverageType">The type of moving average to be used for computing the average gain/loss values</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the RelativeStrengthIndex class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period used for up and down days</param>
            <param name="movingAverageType">The type of moving average to be used for computing the average gain/loss values</param>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeStrengthIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeStrengthIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeVigorIndex">
             <summary>
             The Relative Vigor Index (RVI) compares the ratio of the closing price of a security to its trading range.
             For illustration, let:
             <para>a = Close−Open</para>
             <para>b = Close−Open of One Bar Prior to a</para>
             <para>c = Close−Open of One Bar Prior to b</para>
             <para>d = Close−Open of One Bar Prior to c</para>
             <para>e = High−Low of Bar a</para>
             <para>f = High−Low of Bar b</para>
             <para>g = High−Low of Bar c</para>
             <para>h = High−Low of Bar d</para>
            
             Then let (a+2*(b+c)+d)/6 be NUM and (e+2*(f+g)+h)/6 be DENOM.
             <para>RVI = SMA(NUM)/SMA(DENOM)</para>
             for a specified period.
             
             https://www.investopedia.com/terms/r/relative_vigor_index.asp
             </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndex.CloseBand">
            <summary>
            Gets the band of Closes for the RVI.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndex.RangeBand">
            <summary>
            Gets the band of Ranges for the RVI.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndex.Signal">
            <summary>
            A signal line which behaves like a slowed version of the RVI.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndex.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RelativeVigorIndex"/> (RVI) class.
            </summary>
            <param name="period">The period for the RelativeVigorIndex.</param>
            <param name="type">The type of Moving Average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndex.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RelativeVigorIndex"/> (RVI) class.
            </summary>
            <param name="name">The name of this indicator.</param>
            <param name="period">The period for the RelativeVigorIndex.</param>
            <param name="type">The type of Moving Average to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndex.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RelativeVigorIndexSignal">
            <summary>
            The signal for the Relative Vigor Index, itself an indicator. 
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndexSignal.#ctor(System.String)">
            <summary>
            Initializes the signal term.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndexSignal.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RelativeVigorIndexSignal.WarmUpPeriod">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndexSignal.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RelativeVigorIndexSignal.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ResetCompositeIndicator">
            <summary>
            Class that extends CompositeIndicator to execute a given action once is reset
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ResetCompositeIndicator._extraResetAction">
            <summary>
            Action to execute once this indicator is reset
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ResetCompositeIndicator.#ctor(QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.CompositeIndicator.IndicatorComposer,System.Action)">
            <summary>
            Creates a new ResetCompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indicator for the 'composer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
            <param name="extraResetAction">Action to execute once the composite indicator is reset</param>
        </member>
        <member name="M:QuantConnect.Indicators.ResetCompositeIndicator.#ctor(System.String,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.IndicatorBase,QuantConnect.Indicators.CompositeIndicator.IndicatorComposer,System.Action)">
            <summary>
            Creates a new CompositeIndicator capable of taking the output from the left and right indicators
            and producing a new value via the composer delegate specified
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="left">The left indicator for the 'composer'</param>
            <param name="right">The right indicator for the 'composer'</param>
            <param name="composer">Function used to compose the left and right indicators</param>
            <param name="extraResetAction">Action to execute once the indicator is reset</param>
        </member>
        <member name="M:QuantConnect.Indicators.ResetCompositeIndicator.Reset">
            <summary>
            Resets this indicator and invokes the given reset action
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Rho">
            <summary>
            Option Rho indicator that calculate the rho of an option
            </summary>
            <remarks>sensitivity of option price on interest rate changes</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>am>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Rho class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Rho</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Rho.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the Rho of the option
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.RogersSatchellVolatility">
            <summary>
            This indicator computes the Rogers-Satchell Volatility
            It is an estimator for measuring the volatility of securities 
            with an average return not equal to zero.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RogersSatchellVolatility.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.RogersSatchellVolatility.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.RogersSatchellVolatility.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RogersSatchellVolatility"/> class using the specified parameters
            </summary> 
            <param name="period">The period of moving window</param>
        </member>
        <member name="M:QuantConnect.Indicators.RogersSatchellVolatility.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.RogersSatchellVolatility"/> class using the specified parameters
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of moving window</param>
        </member>
        <member name="M:QuantConnect.Indicators.RogersSatchellVolatility.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.RogersSatchellVolatility.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SchaffTrendCycle">
            <summary>
            This indicator creates the Schaff Trend Cycle
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SchaffTrendCycle.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SchaffTrendCycle.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SchaffTrendCycle.#ctor(System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates the name string and calls on the indicator constructor with given parameters 
            https://www.tradingpedia.com/forex-trading-indicators/schaff-trend-cycle
            </summary>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="cyclePeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.SchaffTrendCycle.#ctor(System.String,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new schaff trend cycle with the specified parameters
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="fastPeriod">The fast moving average period</param>
            <param name="slowPeriod">The slow moving average period</param>
            <param name="cyclePeriod">The signal period</param>
            <param name="type">The type of moving averages to use</param>
        </member>
        <member name="M:QuantConnect.Indicators.SchaffTrendCycle.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.SchaffTrendCycle.ComputeStoch(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Computes the stochastics value for a series.
            </summary>
            <param name="value">The current value of the set</param>
            <param name="highest">The max value of the set within a given period</param>
            <param name="lowest">The min value of the set within a given period</param>
            <returns>Stochastics value </returns>
        </member>
        <member name="M:QuantConnect.Indicators.SchaffTrendCycle.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SharpeRatio">
             <summary>
             Calculation of the Sharpe Ratio (SR) developed by William F. Sharpe.
            
             Reference: https://www.investopedia.com/articles/07/sharpe_ratio.asp
             Formula: S(x) = (Rx - Rf) / stdDev(Rx)
             Where:
             S(x) - sharpe ratio of x
             Rx - average rate of return for x
             Rf - risk-free rate
             </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SharpeRatio._period">
            <summary>
            Length of lookback period for the Sharpe ratio calculation
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SharpeRatio._riskFreeInterestRateModel">
            <summary>
            Risk-free rate model
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.RateOfChange">
            <summary>
            RateOfChange indicator for calculating the sharpe ratio
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.RiskFreeRate">
            <summary>
            RiskFreeRate indicator for calculating the sharpe ratio
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.Ratio">
            <summary>
            Indicator to store the calculation of the sharpe ratio
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.Numerator">
            <summary>
            Indicator to store the numerator of the Sharpe ratio calculation
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SharpeRatio.IsReady">
            <summary>
            Returns whether the indicator is properly initialized with data
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.String,System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Sharpe Ratio indicator using the specified periods
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.Int32,QuantConnect.Data.IRiskFreeInterestRateModel)">
            <summary>
            Creates a new Sharpe Ratio indicator using the specified periods
            </summary>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.String,System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Sharpe Ratio indicator using the specified period using a Python risk free rate model
            </summary>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.Int32,Python.Runtime.PyObject)">
            <summary>
            Creates a new Sharpe Ratio indicator using the specified period using a Python risk free rate model
            </summary>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Creates a new Sharpe Ratio indicator using the specified periods
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRate">Risk-free rate for sharpe ratio calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.#ctor(System.Int32,System.Decimal)">
            <summary>
            Creates a new SharpeRatio indicator using the specified periods
            </summary>
            <param name="period">Period of historical observation for sharpe ratio calculation</param>
            <param name="riskFreeRate">Risk-free rate for sharpe ratio calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.SharpeRatio.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SimpleMovingAverage">
            <summary>
            Represents the traditional simple moving average indicator (SMA)
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SimpleMovingAverage.RollingSum">
            <summary>
            A rolling sum for computing the average for the given period
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SimpleMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SimpleMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SimpleMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.SimpleMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="P:QuantConnect.Indicators.SimpleMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QuantConnect.Indicators.SmoothedOnBalanceVolume" -->
        <member name="F:QuantConnect.Indicators.SmoothedOnBalanceVolume._smoother">
            <summary>This indicator is used to smooth the OnBalanceVolume computation</summary>
            <remarks>This is not exposed publicly since it is the same value as this indicator, meaning
            that this '_smoother' computers the OnBalanceVolume directly, so exposing it publicly would be duplication</remarks>
        </member>
        <member name="P:QuantConnect.Indicators.SmoothedOnBalanceVolume.OnBalanceVolume">
            <summary>
            Gets the OnBalanceVolume which is the more volatile calculation to be smoothed by this indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SmoothedOnBalanceVolume.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SmoothedOnBalanceVolume.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SmoothedOnBalanceVolume.#ctor(System.String,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new SmoothedOnBalanceVolume indicator using the specified period and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The smoothing period used to smooth the OnBalanceVolume values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the OnBalanceVolume values</param>
        </member>
        <member name="M:QuantConnect.Indicators.SmoothedOnBalanceVolume.#ctor(System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new SmoothedOnBalanceVolume indicator using the specified period and moving average type
            </summary>
            <param name="period">The smoothing period used to smooth the OnBalanceVolume values</param>
            <param name="movingAverageType">The type of smoothing used to smooth the OnBalanceVolume values</param>
        </member>
        <member name="M:QuantConnect.Indicators.SmoothedOnBalanceVolume.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.SmoothedOnBalanceVolume.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SortinoRatio">
             <summary>
             Calculation of the Sortino Ratio, a modification of the <see cref="T:QuantConnect.Indicators.SharpeRatio"/>.
            
             Reference: https://www.cmegroup.com/education/files/rr-sortino-a-sharper-ratio.pdf
             Formula: S(x) = (R - T) / TDD
             Where:
             S(x) - Sortino ratio of x
             R - the average period return
             T - the target or required rate of return for the investment strategy under consideration. In
             Sortino’s early work, T was originally known as the minimum acceptable return, or MAR. In his
             more recent work, MAR is now referred to as the Desired Target Return.
             TDD - the target downside deviation. <see cref="T:QuantConnect.Indicators.TargetDownsideDeviation"/>
             </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SortinoRatio.#ctor(System.String,System.Int32,System.Double)">
            <summary>
            Creates a new Sortino Ratio indicator using the specified periods
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">Period of historical observation for Sortino ratio calculation</param>
            <param name="minimumAcceptableReturn">Minimum acceptable return for Sortino ratio calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.SortinoRatio.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new SortinoRatio indicator using the specified periods
            </summary>
            <param name="period">Period of historical observation for Sortino ratio calculation</param>
            <param name="minimumAcceptableReturn">Minimum acceptable return for Sortino ratio calculation</param>
        </member>
        <member name="T:QuantConnect.Indicators.StandardDeviation">
            <summary>
            This indicator computes the n-period population standard deviation.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the StandardDeviation class with the specified period.
            
             Evaluates the standard deviation of samples in the look-back period. 
             On a data set of size N will use an N normalizer and would thus be biased if applied to a subset.
             </summary>
             <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the StandardDeviation class with the specified name and period.
            
            Evaluates the standard deviation of samples in the look-back period.
            On a data set of size N will use an N normalizer and would thus be biased if applied to a subset.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The sample size of the standard deviation</param>
        </member>
        <member name="M:QuantConnect.Indicators.StandardDeviation.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.StochasticRelativeStrengthIndex">
            <summary>
            Stochastic RSI, or simply StochRSI, is a technical analysis indicator used to determine whether 
            an asset is overbought or oversold, as well as to identify current market trends.
            As the name suggests, the StochRSI is a derivative of the standard Relative Strength Index (RSI) and, 
            as such, is considered an indicator of an indicator.
            It is a type of oscillator, meaning that it fluctuates above and below a center line.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.StochasticRelativeStrengthIndex.K">
            <summary>
            Gets the %K output
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.StochasticRelativeStrengthIndex.D">
            <summary>
            Gets the %D output
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.StochasticRelativeStrengthIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.StochasticRelativeStrengthIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.StochasticRelativeStrengthIndex.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the StochasticRelativeStrengthIndex class
            </summary>
            <param name="rsiPeriod">The period of the relative strength index</param>
            <param name="stochPeriod">The period of the stochastic indicator</param>
            <param name="kSmoothingPeriod">The smoothing period of K output (aka %K)</param>
            <param name="dSmoothingPeriod">The smoothing period of D output (aka %D)</param>
            <param name="movingAverageType">The type of moving average to be used for k and d</param>
        </member>
        <member name="M:QuantConnect.Indicators.StochasticRelativeStrengthIndex.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the StochasticRelativeStrengthIndex class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="rsiPeriod">The period of the relative strength index</param>
            <param name="stochPeriod">The period of the stochastic indicator</param>
            <param name="kSmoothingPeriod">The smoothing period of K output</param>
            <param name="dSmoothingPeriod">The smoothing period of D output</param>
            <param name="movingAverageType">The type of moving average to be used</param>
        </member>
        <member name="M:QuantConnect.Indicators.StochasticRelativeStrengthIndex.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of the following sub-indicators from the given state:
            K (%K) and D (%D)
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>The input is returned unmodified.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.StochasticRelativeStrengthIndex.Reset">
            <summary>
            Resets this indicator and all sub-indicators
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Stochastic">
            <summary>
            This indicator computes the Slow Stochastics %K and %D. The Fast Stochastics %K is is computed by 
            (Current Close Price - Lowest Price of given Period) / (Highest Price of given Period - Lowest Price of given Period)
            multiplied by 100. Once the Fast Stochastics %K is calculated the Slow Stochastic %K is calculated by the average/smoothed price of
            of the Fast %K with the given period. The Slow Stochastics %D is then derived from the Slow Stochastics %K with the given period.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.FastStoch">
            <summary>
            Gets the value of the Fast Stochastics %K given Period.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.StochK">
            <summary>
            Gets the value of the Slow Stochastics given Period K.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.StochD">
            <summary>
            Gets the value of the Slow Stochastics given Period D.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Stochastics Indicator from the specified periods.
            </summary>
            <param name="name">The name of this indicator.</param>
            <param name="period">The period given to calculate the Fast %K</param>
            <param name="kPeriod">The K period given to calculated the Slow %K</param>
            <param name="dPeriod">The D period given to calculated the Slow %D</param>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:QuantConnect.Indicators.Stochastic"/> indicator from the specified inputs.
            </summary>
            <param name="period">The period given to calculate the Fast %K</param>
            <param name="kPeriod">The K period given to calculated the Slow %K</param>
            <param name="dPeriod">The D period given to calculated the Slow %D</param>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Stochastic.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeFastStoch(System.Int32,QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the Fast Stochastic %K.
            </summary>
            <param name="period">The period.</param>
            <param name="input">The input.</param>
            <returns>The Fast Stochastics %K value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeStochK(System.Int32,System.Int32,QuantConnect.Data.IBaseData)">
            <summary>
            Computes the Slow Stochastic %K.
            </summary>
            <param name="period">The period.</param>
            <param name="constantK">The constant k.</param>
            <param name="input">The input.</param>
            <returns>The Slow Stochastics %K value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.ComputeStochD(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the Slow Stochastic %D.
            </summary>
            <param name="period">The period.</param>
            <param name="constantK">The constant k.</param>
            <param name="constantD">The constant d.</param>
            <returns>The Slow Stochastics %D value.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Stochastic.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Sum">
            <summary>
            Represents an indicator capable of tracking the sum for the given period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.Sum._sum">
            <summary>
            The sum for the given period
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Sum.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the Sum class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Sum class with the default name and period
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.Sum.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.SuperTrend">
            <summary>
            Super trend indicator. 
            Formula can be found here via the excel file:
            https://tradingtuitions.com/supertrend-indicator-excel-sheet-with-realtime-buy-sell-signals/
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SuperTrend._averageTrueRange">
            <summary>
            Average true range indicator used to calculate super trend's basic upper and lower bands
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.BasicUpperBand">
            <summary>
            Basic Upper Band
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.BasicLowerBand">
            <summary>
            Basic Lower band
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.CurrentTrailingUpperBand">
            <summary>
            Current Trailing Upper Band
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.CurrentTrailingLowerBand">
            <summary>
            Current Trailing Lower Band
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SuperTrend.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SuperTrend.#ctor(System.String,System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new SuperTrend indicator using the specified name, period, multiplier and moving average type
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The smoothing period used by average true range</param>
            <param name="multiplier">The coefficient used in calculations of basic upper and lower bands</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.SuperTrend.#ctor(System.Int32,System.Decimal,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Creates a new SuperTrend indicator using the specified period, multiplier and moving average type
            </summary>
            <param name="period">The smoothing period used in average true range</param>
            <param name="multiplier">The coefficient used in calculations of basic upper and lower bands</param>
            <param name="movingAverageType">The type of smoothing used to smooth the true range values</param>
        </member>
        <member name="M:QuantConnect.Indicators.SuperTrend.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.SuperTrend.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SwissArmyKnifeTool">
            <summary>
            The tools of the Swiss Army Knife. Some of the tools lend well to chaining with the "Of" Method, others may be treated as moving averages
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SwissArmyKnifeTool.Gauss">
            <summary>
            Two Pole Gaussian Filter (0)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SwissArmyKnifeTool.Butter">
            <summary>
            Two Pole Butterworth Filter (1)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SwissArmyKnifeTool.HighPass">
            <summary>
            High Pass Filter (2)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SwissArmyKnifeTool.TwoPoleHighPass">
            <summary>
            Two Pole High Pass Filter (3)
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.SwissArmyKnifeTool.BandPass">
            <summary>
            BandPass Filter (4)
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.SwissArmyKnife">
            <summary>
            Swiss Army Knife indicator by John Ehlers
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SwissArmyKnife.#ctor(System.Int32,System.Double,QuantConnect.Indicators.SwissArmyKnifeTool)">
            <summary>
            Swiss Army Knife indicator by John Ehlers
            </summary>
            <param name="period"></param>
            <param name="delta"></param>
            <param name="tool"></param>
        </member>
        <member name="M:QuantConnect.Indicators.SwissArmyKnife.#ctor(System.String,System.Int32,System.Double,QuantConnect.Indicators.SwissArmyKnifeTool)">
            <summary>
            Swiss Army Knife indicator by John Ehlers
            </summary>
            <param name="name"></param>
            <param name="period"></param>
            <param name="delta"></param>
            <param name="tool"></param>
        </member>
        <member name="P:QuantConnect.Indicators.SwissArmyKnife.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.SwissArmyKnife.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.SwissArmyKnife.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.SwissArmyKnife.Reset">
            <summary>
            Resets to the initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.T3MovingAverage">
            <summary>
            This indicator computes the T3 Moving Average (T3).
            The T3 Moving Average is calculated with the following formula:
            EMA1(x, Period) = EMA(x, Period)
            EMA2(x, Period) = EMA(EMA1(x, Period),Period)
            GD(x, Period, volumeFactor) = (EMA1(x, Period)*(1+volumeFactor)) - (EMA2(x, Period)* volumeFactor)
            T3 = GD(GD(GD(t, Period, volumeFactor), Period, volumeFactor), Period, volumeFactor);
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.#ctor(System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.T3MovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the T3MovingAverage</param>
            <param name="volumeFactor">The volume factor of the T3MovingAverage (value must be in the [0,1] range, defaults to 0.7)</param>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.#ctor(System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.T3MovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the T3MovingAverage</param>
            <param name="volumeFactor">The volume factor of the T3MovingAverage (value must be in the [0,1] range, defaults to 0.7)</param>
        </member>
        <member name="P:QuantConnect.Indicators.T3MovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.T3MovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.T3MovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TargetDownsideDeviation">
            <summary>
            This indicator computes the n-period target downside deviation. The target downside deviation is defined as the 
            root-mean-square, or RMS, of the deviations of the realized return’s underperformance from the target return 
            where all returns above the target return are treated as underperformance of 0.
            
            Reference: https://www.cmegroup.com/education/files/rr-sortino-a-sharper-ratio.pdf
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.TargetDownsideDeviation._minimumAcceptableReturn">
            <summary>
            Minimum acceptable return (MAR) for target downside deviation calculation
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TargetDownsideDeviation.#ctor(System.Int32,System.Double)">
             <summary>
             Initializes a new instance of the TargetDownsideDeviation class with the specified period and 
             minimum acceptable return.
            
             The target downside deviation is defined as the root-mean-square, or RMS, of the deviations of 
             the realized return’s underperformance from the target return where all returns above the target 
             return are treated as underperformance of 0.
             </summary>
             <param name="period">The sample size of the target downside deviation</param>
             <param name="minimumAcceptableReturn">Minimum acceptable return (MAR) for target downside deviation calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.TargetDownsideDeviation.#ctor(System.String,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the TargetDownsideDeviation class with the specified period and 
            minimum acceptable return.
            
            The target downside deviation is defined as the root-mean-square, or RMS, of the deviations of 
            the realized return’s underperformance from the target return where all returns above the target 
            return are treated as underperformance of 0.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The sample size of the target downside deviation</param>
            <param name="minimumAcceptableReturn">Minimum acceptable return (MAR) for target downside deviation calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.TargetDownsideDeviation.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="window">The window for the input history</param>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.Theta">
            <summary>
            Option Theta indicator that calculate the theta of an option
            </summary>
            <remarks>sensitivity of option price on time decay</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>am>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Theta class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Theta</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Theta.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the Theta of the option
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TimeProfile">
            <summary>
            Represents an Indicator of the Market Profile with Time Price Opportunity (TPO) mode and its attributes
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TimeProfile.#ctor(System.Int32)">
            <summary>
            Creates a new TimeProfile indicator with the specified period
            </summary>
            <param name="period">The period of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeProfile.#ctor(System.String,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            Creates a new TimeProfile indicator with the specified name, period and priceRangeRoundOff
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="valueAreaVolumePercentage">The percentage of volume contained in the value area</param>
            <param name="priceRangeRoundOff">How many digits you want to round and the precision.
            i.e 0.01 round to two digits exactly.</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeProfile.GetVolume(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Define the Volume in Time Profile mode
            </summary>
            <param name="input"></param>
            <returns>1</returns>
        </member>
        <member name="T:QuantConnect.Indicators.TimeSeriesForecast">
            <summary>
            Represents an indicator capable of predicting new values given previous data from a window.
            Source: https://tulipindicators.org/tsf
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesForecast.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new TimeSeriesForecast indicator with the specified period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesForecast.#ctor(System.Int32)">
            <summary>
            Creates a new TimeSeriesForecast indicator with the specified period
            </summary>
            <param name="period">The period over which to look back</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesForecast.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.TimeSeriesIndicator">
            <summary>
            The base class for any Time Series-type indicator, containing methods common to most of such models.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TimeSeriesIndicator._diffHeads">
            <summary>
            "Integration" constants
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TimeSeriesIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesIndicator.#ctor(System.String)">
            <summary>
            A constructor for a basic Time Series indicator.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesIndicator.DifferenceSeries(System.Int32,System.Double[],System.Double[]@)">
            <summary>
            Differences a time series d times.
            </summary>
            <param name="series">Series to difference</param>
            <param name="d">The differencing order</param>
            <param name="diffHeads">"Integration" constants</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesIndicator.InverseDifferencedSeries(System.Double[],System.Double[])">
            <summary>
            Undoes the differencing of a time series which has been differenced using <see cref="M:QuantConnect.Indicators.TimeSeriesIndicator.DifferenceSeries(System.Int32,System.Double[],System.Double[]@)" />.
            https://github.com/statsmodels/statsmodels/blob/04f00006a7aeb1c93d6894caa420698400da6c33/statsmodels/tsa/tsatools.py#L758
            </summary>
            <param name="series">Series to un-difference</param>
            <param name="diffHeads">Series of "integration" constants for un-differencing</param>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesIndicator.LaggedSeries(System.Int32,System.Double[],System.Boolean)">
            <summary>
            Returns an array of lagged series for each of {1,...,p} lags.
            </summary>
            <param name="p">Max lag order</param>
            <param name="series">Series to calculate the lags of</param>
            <param name="includeT">Whether or not to include t with its lags in the output array</param>
            <returns>A list such that index i returns the series for i+1 lags</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TimeSeriesIndicator.CumulativeSum(System.Collections.Generic.List{System.Double},System.Boolean)">
            <summary>
            Returns a series where each spot is taken by the cumulative sum of all points up to and including
            the value at that spot in the original series.
            </summary>
            <param name="series">Series to cumulatively sum over.</param>
            <param name="reverse">Whether to reverse the series before applying the cumulative sum.</param>
            <returns>Cumulatively summed series.</returns>
        </member>
        <member name="T:QuantConnect.Indicators.TradeBarIndicator">
            <summary>
            The TradeBarIndicator is an indicator that accepts TradeBar data as its input.
            
            This type is more of a shim/typedef to reduce the need to refer to things as IndicatorBase&lt;TradeBar&gt;
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TradeBarIndicator.#ctor(System.String)">
            <summary>
            Creates a new TradeBarIndicator with the specified name
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="T:QuantConnect.Indicators.TriangularMovingAverage">
            <summary>
            This indicator computes the Triangular Moving Average (TRIMA). 
            The Triangular Moving Average is calculated with the following formula:
            (1) When the period is even, TRIMA(x,period)=SMA(SMA(x,period/2),(period/2)+1)
            (2) When the period is odd,  TRIMA(x,period)=SMA(SMA(x,(period+1)/2),(period+1)/2)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TriangularMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TriangularMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.TriangularMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TriangularMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TriangularMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TripleExponentialMovingAverage">
            <summary>
            This indicator computes the Triple Exponential Moving Average (TEMA). 
            The Triple Exponential Moving Average is calculated with the following formula:
            EMA1 = EMA(t,period)
            EMA2 = EMA(EMA(t,period),period)
            EMA3 = EMA(EMA(EMA(t,period),period),period)
            TEMA = 3 * EMA1 - 3 * EMA2 + EMA3
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TripleExponentialMovingAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the TEMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TripleExponentialMovingAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the TEMA</param>
        </member>
        <member name="P:QuantConnect.Indicators.TripleExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TripleExponentialMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TripleExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Trix">
            <summary>
            This indicator computes the TRIX (1-period ROC of a Triple EMA)
            The TRIX is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:trix
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Trix"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Trix"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Trix.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Trix.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            We have 3 EMAs chained on base period so every _period points starts the next EMA,
            hence -1 on the multiplication, and finally the last ema updates our _roc which needs
            to be warmed up before this indicator is warmed up.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Trix.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.TrueRange">
            <summary>
            This indicator computes the True Range (TR).
            The True Range is the greatest of the following values:
            value1 = distance from today's high to today's low.
            value2 = distance from yesterday's close to today's high.
            value3 = distance from yesterday's close to today's low.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueRange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TrueRange"/> class using the specified name.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueRange.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TrueRange"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.TrueRange.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TrueRange.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueRange.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.TrueStrengthIndex">
             <summary>
             This indicator computes the True Strength Index (TSI).
             The True Strength Index is calculated as explained here:
             https://school.stockcharts.com/doku.php?id=technical_indicators:true_strength_index
            
             Briefly, the calculation has three steps:
               1. Smooth the momentum and the absolute momentum by getting an EMA of them (typically of period 25)
               2. Double smooth the momentum and the absolute momentum by getting an EMA of their EMA (typically of period 13)
               3. The TSI formula itself: divide the double-smoothed momentum over the double-smoothed absolute momentum and multiply by 100
            
             The signal is typically a 7-to-12-EMA of the TSI.
             </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TrueStrengthIndex.Signal">
            <summary>
            Gets the signal line for the TSI indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TrueStrengthIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.TrueStrengthIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.TrueStrengthIndex.#ctor(System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TrueStrengthIndex"/> class using the specified short and long term smoothing periods, and the signal period and type.
            </summary>
            <param name="shortTermPeriod">Period used for the first price change smoothing</param>
            <param name="longTermPeriod">Period used for the second (double) price change smoothing</param>
            <param name="signalPeriod">The signal period</param>
            <param name="signalType">The type of moving average to use for the signal</param>
        </member>
        <member name="M:QuantConnect.Indicators.TrueStrengthIndex.#ctor(System.String,System.Int32,System.Int32,System.Int32,QuantConnect.Indicators.MovingAverageType)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.TrueStrengthIndex"/> class using the specified name, the short and long term smoothing periods, and the signal period and type.
            </summary>
            <param name="name">The name of the indicator</param>
            <param name="shortTermPeriod">Period used for the first price change smoothing</param>
            <param name="longTermPeriod">Period used for the second (double) price change smoothing</param>
            <param name="signalPeriod">The signal period</param>
            <param name="signalType">The type of moving average to use for the signal</param>
        </member>
        <member name="M:QuantConnect.Indicators.TrueStrengthIndex.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.TrueStrengthIndex.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.UltimateOscillator">
            <summary>
            This indicator computes the Ultimate Oscillator (ULTOSC)
            The Ultimate Oscillator is calculated as explained here:
            http://stockcharts.com/school/doku.php?id=chart_school:technical_indicators:ultimate_oscillator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.UltimateOscillator"/> class using the specified parameters
            </summary>
            <param name="period1">The first period</param>
            <param name="period2">The second period</param>
            <param name="period3">The third period</param>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.UltimateOscillator"/> class using the specified parameters
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period1">The first period</param>
            <param name="period2">The second period</param>
            <param name="period3">The third period</param>
        </member>
        <member name="P:QuantConnect.Indicators.UltimateOscillator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.UltimateOscillator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.UltimateOscillator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.ValueAtRisk">
            <summary>
            This indicator computes 1-day VaR for a specified confidence level and lookback period
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ValueAtRisk._confidenceLevel">
            <summary>
            Confidence level for VaR calculation
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ValueAtRisk._rateOfChange">
            <summary>
            RateOfChange indicator to calculate the returns
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ValueAtRisk._returns">
            <summary>
            Rolling window to store the returns of the input data
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ValueAtRisk.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ValueAtRisk.IsReady">
            <summary>
            Gets a flag indicating when the indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ValueAtRisk.#ctor(System.String,System.Int32,System.Double)">
            <summary>
            Creates a new ValueAtRisk indicator with a specified period and confidence level
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">Historical lookback period in days</param>
            <param name="confidenceLevel">Confidence level for VaR calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.ValueAtRisk.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a new ValueAtRisk indicator with a specified period and confidence level
            </summary>
            <param name="period">Historical lookback period in days</param>
            <param name="confidenceLevel">Confidence level for VaR calculation</param>
        </member>
        <member name="M:QuantConnect.Indicators.ValueAtRisk.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.ValueAtRisk.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.VariableIndexDynamicAverage">
            <summary>
            This indicator computes the n-period adaptive weighted moving average indicator.
            VIDYAi = Pricei x F x ABS(CMOi) + VIDYAi-1 x (1 - F x ABS(CMOi))
            where:
            VIDYAi - is the value of the current period.
            Pricei - is the source price of the period being calculated.
            F = 2/(Period_EMA+1) - is a smoothing factor.
            ABS(CMOi) - is the absolute current value of CMO.
            VIDYAi-1 - is the value of the period immediately preceding the period being calculated.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VariableIndexDynamicAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.VariableIndexDynamicAverage"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.VariableIndexDynamicAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.VariableIndexDynamicAverage"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.VariableIndexDynamicAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VariableIndexDynamicAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VariableIndexDynamicAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.VariableIndexDynamicAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Variance">
            <summary>
            This indicator computes the n-period population variance.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Variance"/> class using the specified period.
            </summary> 
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Variance"/> class using the specified name and period.
            </summary> 
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="P:QuantConnect.Indicators.Variance.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <param name="window">The window for the input history</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Variance.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Vega">
            <summary>
            Option Vega indicator that calculate the Vega of an option
            </summary>
            <remarks>sensitivity of option price on IV changes</remarks>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,QuantConnect.Data.IDividendYieldModel,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,Python.Runtime.PyObject,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYieldModel">Dividend yield model</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(System.String,QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(QuantConnect.Symbol,QuantConnect.Data.IRiskFreeInterestRateModel,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(System.String,QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(QuantConnect.Symbol,Python.Runtime.PyObject,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRateModel">Risk-free rate model</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(System.String,QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="option">The option to be tracked</param>am>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.#ctor(QuantConnect.Symbol,System.Decimal,System.Decimal,QuantConnect.Symbol,System.Nullable{QuantConnect.Indicators.OptionPricingModelType},System.Nullable{QuantConnect.Indicators.OptionPricingModelType})">
            <summary>
            Initializes a new instance of the Vega class
            </summary>
            <param name="option">The option to be tracked</param>
            <param name="riskFreeRate">Risk-free rate, as a constant</param>
            <param name="dividendYield">Dividend yield, as a constant</param>
            <param name="mirrorOption">The mirror option for parity calculation</param>
            <param name="optionModel">The option pricing model used to estimate Vega</param>
            <param name="ivModel">The option pricing model used to estimate IV</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vega.CalculateGreek(System.Decimal)">
            <summary>
            Calculate the Vega of the option
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.VolumeProfile">
            <summary>
            Represents an Indicator of the Market Profile with Volume Profile mode and its attributes
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeProfile.#ctor(System.Int32)">
            <summary>
            Creates a new VolumeProfile indicator with the specified period
            </summary>
            <param name="period">The period of the indicator</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeProfile.#ctor(System.String,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            Creates a new VolumeProfile indicator with the specified name, period and priceRangeRoundOff
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of this indicator</param>
            <param name="valueAreaVolumePercentage">The percentage of volume contained in the value area</param>
            <param name="priceRangeRoundOff">How many digits you want to round and the precision.
            i.e 0.01 round to two digits exactly.</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeProfile.GetVolume(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Define the Volume for the Volume Profile mode
            </summary>
            <param name="input"></param>
            <returns>The volume of the input Data Point</returns>
        </member>
        <member name="T:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator">
            <summary>
            Volume Weighted Average Price (VWAP) Indicator:
            It is calculated by adding up the dollars traded for every transaction (price multiplied
            by number of shares traded) and then dividing by the total shares traded for the day.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator._period">
            <summary>
            In this VWAP calculation, typical price is defined by (O + H + L + C) / 4
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.Price">
            <summary>
            Indentity indicator for price
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.Volume">
            <summary>
            Identity indicator for volume
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.VWAP">
            <summary>
            Volume Weighted Average Price
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the VWAP class with the default name and period
            </summary>
            <param name="period">The period of the VWAP</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the VWAP class with a given name and period
            </summary>
            <param name="name">string - the name of the indicator</param>
            <param name="period">The period of the VWAP</param>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedAveragePriceIndicator.GetTimeWeightedAveragePrice(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Gets an estimated average price to use for the interval covered by the input trade bar.
            </summary>
            <param name="input">The current trade bar input</param>
            <returns>An estimated average price over the trade bar's interval</returns>
        </member>
        <member name="T:QuantConnect.Indicators.VolumeWeightedMovingAverage">
            <summary>
            This indicator computes the Volume Weighted Moving Average (VWMA)
            It is a technical analysis indicator used by traders to determine the average price of an asset over a given period of time,
            taking into account both price and volume.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.VolumeWeightedMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.VolumeWeightedMovingAverage"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.VolumeWeightedMovingAverage"/> class using the specified name.
            </summary>
            <param name="period">The period of the SMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedMovingAverage.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.VolumeWeightedMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.Vortex">
            <summary>
            Represents the Vortex Indicator, which identifies the start and continuation of market trends.
            It includes components that capture positive (upward) and negative (downward) trend movements.
            This indicator compares the ranges within the current period to previous periods to calculate
            upward and downward movement trends.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Vortex.PlusVortex">
            <summary>
            Gets the Positive Vortex Indicator, which reflects positive trend movements.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Vortex.MinusVortex">
            <summary>
            Gets the Negative Vortex Indicator, which reflects negative trend movements.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Vortex.IsReady">
            <summary>
            Indicates whether this indicator is fully ready and all buffers have been filled.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.Vortex.WarmUpPeriod">
            <summary>
            The minimum number of samples needed for the indicator to be ready and provide reliable values.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.Vortex.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Vortex"/> class using the specified period.
            </summary>
            <param name="period">The number of periods used to construct the Vortex Indicator.</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vortex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.Vortex"/> class with a custom name and period.
            </summary>
            <param name="name">The custom name for this instance of the Vortex Indicator.</param>
            <param name="period">The number of periods used to construct the Vortex Indicator.</param>
        </member>
        <member name="M:QuantConnect.Indicators.Vortex.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of the Vortex Indicator based on the provided input.
            </summary>
            <param name="input">The input data used to compute the indicator value.</param>
            <returns>The computed value of the indicator.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.Vortex.Reset">
            <summary>
            Resets all indicators and internal state.
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.WilderAccumulativeSwingIndex">
            <summary>
            This indicator calculates the Accumulative Swing Index (ASI) as defined by
            Welles Wilder in his book 'New Concepts in Technical Trading Systems'.
            <para>
            ASIₜ = ASIₜ₋₁ + SIₜ
            </para>
            <para>
              Where:
              <list type="bullet">
                <item>
                  <term>ASIₜ₋₁</term>
                  <description>
                    The <see cref="T:QuantConnect.Indicators.WilderAccumulativeSwingIndex"/> for the previous period.
                  </description>
                </item>
                <item>
                  <term>SIₜ</term>
                  <description>
                    The <see cref="T:QuantConnect.Indicators.WilderSwingIndex"/> calculated for the current period.
                  </description>
                </item>
              </list>
            </para>
            </summary>
            <seealso cref="T:QuantConnect.Indicators.WilderSwingIndex"/>
        </member>
        <member name="F:QuantConnect.Indicators.WilderAccumulativeSwingIndex._si">
            <summary>
            The Swing Index (SI) used in calculating the Accumulative Swing Index.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderAccumulativeSwingIndex.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.WilderAccumulativeSwingIndex"/> class using the specified name.
            </summary>
            <param name="limitMove">A decimal representing the limit move value for the period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilderAccumulativeSwingIndex.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.WilderAccumulativeSwingIndex"/> class using the specified name.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="limitMove">A decimal representing the limit move value for the period.</param>
        </member>
        <member name="P:QuantConnect.Indicators.WilderAccumulativeSwingIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilderAccumulativeSwingIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderAccumulativeSwingIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.WilderAccumulativeSwingIndex.Reset">
            <summary>
            Resets this indicator to its initial state.
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.WilderMovingAverage">
            <summary>
            Represents the moving average indicator defined by Welles Wilder in his book:
            New Concepts in Technical Trading Systems.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WilderMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the Wilder Moving Average</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilderMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WilderMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the Wilder Moving Average</param>
        </member>
        <member name="P:QuantConnect.Indicators.WilderMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilderMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderMovingAverage.ComputeNextValue(QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.WilderSwingIndex">
            <summary>
            This indicator calculates the Swing Index (SI) as defined by Welles Wilder
            in his book 'New Concepts in Technical Trading Systems'.
            <para>
            SIₜ = 50 * ( N / R ) * ( K / T )
            </para>
            <para>
              Where:
              <list type="bullet">
                <item>
                  <term>N</term>
                  <description>
                    Equals: Cₜ - Cₜ₋₁ + 0.5 * (Cₜ - Oₜ) + 0.25 * (Cₜ₋₁ - Oₜ₋₁)
                    <para>
                      <i>See <see cref="M:QuantConnect.Indicators.WilderSwingIndex.GetNValue"/></i>
                    </para>
                  </description>
                </item>
                <item>
                  <term>R</term>
                  <description>
                    Found by selecting the expression with the largest value and
                    then using the corresponding formula.
                    <para>
                      Expression =&gt; Formula
                      <list type="number">
                        <item>
                          <description>
                            |Hₜ - Cₜ₋₁| =&gt; |Hₜ - Cₜ| - 0.5 * |Lₜ - Cₜ₋₁| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|
                          </description>
                        </item>
                        <item>
                          <description>
                            |Lₜ - Cₜ₋₁| =&gt; |Lₜ - Cₜ| - 0.5 * |Hₜ - Cₜ₋₁| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|
                          </description>
                        </item>
                        <item>
                          <description>
                            |Hₜ - Lₜ| =&gt; |Hₜ - Lₜ₋₁| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|
                          </description>
                        </item>
                      </list>
                    </para>
                    <para>
                      <i>See <see cref="M:QuantConnect.Indicators.WilderSwingIndex.GetRValue"/></i>
                    </para>
                  </description>
                </item>
                <item>
                  <term>K</term>
                  <description>
                    Found by selecting the larger of the two expressions:
                    |Hₜ - Cₜ₋₁|, |Lₜ - Cₜ₋₁|
                    <para>
                      <i>See <see cref="M:QuantConnect.Indicators.WilderSwingIndex.GetKValue"/></i>
                    </para>
                  </description>
                </item>
                <item>
                  <term>T</term>
                  <description>
                    The limit move, or the maximum change in price during the time
                    period for the bar. Passed as limitMove via the constructor.
                    <para>
                      <i>See <see cref="F:QuantConnect.Indicators.WilderSwingIndex.T"/></i>
                    </para>
                  </description>
                </item>
              </list>
            </para>
            </summary>
            <seealso cref="T:QuantConnect.Indicators.WilderAccumulativeSwingIndex"/>
        </member>
        <member name="P:QuantConnect.Indicators.WilderSwingIndex._currentInput">
            <summary>
            Holds the bar for the current period.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilderSwingIndex._previousInput">
            <summary>
            Holds the bar for the previous period.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.WilderSwingIndex.T">
            <summary>
            Gets the value for T (the limit move value) set in the constructor.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.WilderSwingIndex"/> class using the specified name.
            </summary>
            <param name="name">A string for the name of this indicator.</param>
            <param name="limitMove">A decimal representing the limit move value for the period.</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:QuantConnect.Indicators.WilderSwingIndex"/> class using the default name.
            </summary>
            <param name="limitMove">A decimal representing the limit move value for the period.</param>
        </member>
        <member name="P:QuantConnect.Indicators.WilderSwingIndex.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized.
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilderSwingIndex.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.ComputeNextValue(QuantConnect.Data.Market.TradeBar)">
            <summary>
            Computes the next value of this indicator from the given state.
            </summary>
            <param name="input">The input given to the indicator.</param>
            <returns>A new value for this indicator.</returns>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.GetNValue">
            <summary>
            Gets the value for N.
            <para>
            N = Cₜ - Cₜ₋₁ + 0.5 * (Cₜ - Oₜ) + 0.25 * (Cₜ₋₁ - Oₜ₋₁)
            </para>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.GetRValue">
            <summary>
            Gets the value for R, determined by using the formula corresponding
            to the expression with the largest value.
            <para>
              <i>Expressions:</i>
              <list type="number">
                <item>
                  <description>|Hₜ - Cₜ₋₁|</description>
                </item>
                <item>
                  <description>|Lₜ - Cₜ₋₁|</description>
                </item>
                <item>
                  <description>|Hₜ - Lₜ|</description>
                </item>
              </list>
            </para>
            <para>
              <i>Formulas:</i>
              <list type="number">
                <item>
                  <description>|Hₜ - Cₜ₋₁| - 0.5 * |Lₜ - Cₜ₋₁| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|</description>
                </item>
                <item>
                  <description>|Lₜ - Cₜ₋₁| - 0.5 * |Hₜ - Cₜ₋₁| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|</description>
                </item>
                <item>
                  <description>|Hₜ - Lₜ| + 0.25 * |Cₜ₋₁ - Oₜ₋₁|</description>
                </item>
              </list>
            </para>
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilderSwingIndex.GetKValue">
            <summary>
            Gets the value for K, which is equal to the larger of the two following expressions.
            <para>
              <i>Expressions:</i>
              <list type="number">
                <item>
                  <description>|Hₜ - Cₜ₋₁|</description>
                </item>
                <item>
                  <description>|Lₜ - Cₜ₋₁|</description>
                </item>
              </list>
            </para>
            </summary>
        </member>
        <member name="T:QuantConnect.Indicators.WilliamsPercentR">
            <summary>
            Williams %R, or just %R, is the current closing price in relation to the high and low of
            the past N days (for a given N). The value of this indicator fluctuates between -100 and 0.
            The symbol is said to be oversold when the oscillator is below -80%,
            and overbought when the oscillator is above -20%. 
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.Maximum">
            <summary>
            Gets the Maximum indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.Minimum">
            <summary>
            Gets the Minimum indicator
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WilliamsPercentR.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.#ctor(System.Int32)">
            <summary>
            Creates a new Williams %R.
            </summary>
            <param name="period">The look-back period to determine the Williams %R</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Williams %R.
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The look-back period to determine the Williams %R</param>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.Reset">
            <summary>
            Resets this indicator and both sub-indicators (Max and Min)
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WilliamsPercentR.ComputeNextValue(QuantConnect.Data.Market.IBaseDataBar)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.WindowIdentity">
            <summary>
            Represents an indicator that is a ready after ingesting enough samples (# samples > period) 
            and always returns the same value as it is given.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WindowIdentity class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the WindowIdentity</param>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the WindowIdentity class with the default name and period
            </summary>
            <param name="period">The period of the WindowIdentity</param>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIdentity.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIdentity.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.WindowIndicator`1">
            <summary>
            Represents an indicator that acts on a rolling window of data
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIndicator`1.Period">
            <summary>
            Gets the period of this window indicator
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WindowIndicator class
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The number of data points to hold in the window</param>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIndicator`1.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.WindowIndicator`1.WarmUpPeriod">
            <summary>
            Required period, in data points, to the indicator to be ready and fully initialized
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.ComputeNextValue(`0)">
            <summary>
            Computes the next value of this indicator from the given state
            </summary>
            <param name="input">The input given to the indicator</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.Reset">
            <summary>
                Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.WindowIndicator`1.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{`0},`0)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
        <member name="T:QuantConnect.Indicators.ZeroLagExponentialMovingAverage">
            <summary>
            Represents the zero lag moving average indicator (ZLEMA)
            ie a technical indicator that aims is to eliminate the inherent lag associated to all trend 
            following indicators which average a price over time.
            </summary>
        </member>
        <member name="F:QuantConnect.Indicators.ZeroLagExponentialMovingAverage._period">
            <summary>
            An exponential moving average is used
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.IsReady">
            <summary>
            Gets a flag indicating when this indicator is ready and fully initialized
            </summary>
        </member>
        <member name="P:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.WarmUpPeriod">
            <summary>
            Required period, in data points, for the indicator to be ready and fully initialized.
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ZeroLagMovingAverage class with the specified name and period
            </summary>
            <param name="name">The name of this indicator</param>
            <param name="period">The period of the ZLEMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ZeroLagMovingAverage class with the default name and period
            </summary>
            <param name="period">The period of the ZLEMA</param>
        </member>
        <member name="M:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.Reset">
            <summary>
            Resets this indicator to its initial state
            </summary>
        </member>
        <member name="M:QuantConnect.Indicators.ZeroLagExponentialMovingAverage.ComputeNextValue(QuantConnect.Indicators.IReadOnlyWindow{QuantConnect.Indicators.IndicatorDataPoint},QuantConnect.Indicators.IndicatorDataPoint)">
            <summary>
            Computes the next value for this indicator from the given state.
            </summary>
            <param name="window">The window of data held in this indicator</param>
            <param name="input">The input value to this indicator on this time step</param>
            <returns>A new value for this indicator</returns>
        </member>
    </members>
</doc>
